#!/bin/bash

# üîê Script para Configurar Secrets no GitHub
# Reposit√≥rio: https://github.com/fernandinhomartins40/urbansend/

echo "üîê Setup GitHub Secrets for UrbanSend Deploy"
echo "============================================="
echo ""

# === CORES ===
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
log_error() { echo -e "${RED}‚ùå $1${NC}"; }

# === INFORMA√á√ïES ===
REPO_URL="https://github.com/fernandinhomartins40/urbansend/"
VPS_IP="72.60.10.112"
DOMAIN="www.urbanmail.com.br"

log_info "Reposit√≥rio: $REPO_URL"
log_info "VPS IP: $VPS_IP"  
log_info "Dom√≠nio: $DOMAIN"
echo ""

# === VERIFICAR DEPEND√äNCIAS ===
log_info "Verificando depend√™ncias..."

if ! command -v gh &> /dev/null; then
    log_error "GitHub CLI (gh) n√£o est√° instalado!"
    echo "üì• Instale com: https://cli.github.com/"
    echo ""
    echo "Ubuntu/Debian:"
    echo "  curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg"
    echo "  echo \"deb [arch=\$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main\" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null"
    echo "  sudo apt update && sudo apt install gh"
    echo ""
    echo "macOS:"
    echo "  brew install gh"
    echo ""
    exit 1
fi

log_success "GitHub CLI encontrado"

# === LOGIN NO GITHUB ===
log_info "Verificando autentica√ß√£o GitHub..."

if ! gh auth status &>/dev/null; then
    log_warning "N√£o est√° autenticado no GitHub"
    log_info "Execute: gh auth login"
    echo ""
    read -p "Deseja fazer login agora? (y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        gh auth login
    else
        log_error "Autentica√ß√£o necess√°ria para continuar"
        exit 1
    fi
fi

log_success "Autenticado no GitHub"

# === VERIFICAR REPOSIT√ìRIO ===
log_info "Verificando acesso ao reposit√≥rio..."

if gh repo view fernandinhomartins40/urbansend &>/dev/null; then
    log_success "Acesso ao reposit√≥rio confirmado"
else
    log_error "Sem acesso ao reposit√≥rio fernandinhomartins40/urbansend"
    echo "Verifique se:"
    echo "1. O reposit√≥rio existe"
    echo "2. Voc√™ tem permiss√µes de admin/write"
    echo "3. Est√° autenticado corretamente"
    exit 1
fi

# === COLETAR SENHA VPS ===
echo ""
log_info "Configura√ß√£o de Secrets necess√°ria:"
echo ""
echo "üìã Secret necess√°rio:"
echo "  - VPS_PASSWORD: Senha SSH da VPS $VPS_IP"
echo ""

log_warning "‚ö†Ô∏è  A senha ser√° armazenada de forma segura no GitHub Secrets"
log_warning "‚ö†Ô∏è  Nunca compartilhe ou exponha esta informa√ß√£o"
echo ""

read -s -p "üîë Digite a senha SSH da VPS ($VPS_IP): " VPS_PASSWORD
echo ""

if [ -z "$VPS_PASSWORD" ]; then
    log_error "Senha n√£o pode estar vazia!"
    exit 1
fi

# === TESTAR CONECTIVIDADE VPS ===
log_info "Testando conectividade com VPS..."

if ping -c 1 $VPS_IP &> /dev/null; then
    log_success "VPS est√° acess√≠vel"
else
    log_error "VPS n√£o est√° acess√≠vel via ping"
    echo "Verifique:"
    echo "1. Conex√£o com internet"
    echo "2. IP da VPS: $VPS_IP"
    echo "3. Firewall da VPS"
    exit 1
fi

# === TESTAR SSH (OPCIONAL) ===
if command -v sshpass &> /dev/null; then
    log_info "Testando conex√£o SSH..."
    
    if sshpass -p "$VPS_PASSWORD" ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no root@$VPS_IP "echo 'SSH OK'" &>/dev/null; then
        log_success "Conex√£o SSH funcionando"
    else
        log_warning "Falha na conex√£o SSH - verifique senha e configura√ß√µes"
        echo "‚ö†Ô∏è  Continuando mesmo assim (pode ser configura√ß√£o SSH)"
    fi
else
    log_info "sshpass n√£o dispon√≠vel - pulando teste SSH"
fi

# === CONFIGURAR SECRETS ===
log_info "Configurando secret no GitHub..."

# Configurar VPS_PASSWORD
if gh secret set VPS_PASSWORD --body "$VPS_PASSWORD" --repo fernandinhomartins40/urbansend; then
    log_success "Secret VPS_PASSWORD configurado"
else
    log_error "Falha ao configurar secret VPS_PASSWORD"
    exit 1
fi

# === VERIFICAR SECRETS CONFIGURADOS ===
log_info "Verificando secrets configurados..."

SECRETS=$(gh secret list --repo fernandinhomartins40/urbansend)
echo "$SECRETS"

if echo "$SECRETS" | grep -q "VPS_PASSWORD"; then
    log_success "Secret VPS_PASSWORD confirmado"
else
    log_error "Secret VPS_PASSWORD n√£o encontrado"
    exit 1
fi

# === INFORMA√á√ïES SOBRE WORKFLOW ===
echo ""
log_info "üöÄ CONFIGURA√á√ÉO COMPLETA!"
echo ""
echo "üìã Secrets configurados:"
echo "  ‚úÖ VPS_PASSWORD (senha SSH)"
echo ""
echo "üìÅ Workflows dispon√≠veis:"
echo "  - .github/workflows/deploy.yml (Deploy produ√ß√£o)"
echo "  - .github/workflows/test-workflow.yml (Testes)"
echo ""
echo "üöÄ Como usar:"
echo "  1. Push para branch 'main' ou 'production'"
echo "  2. Ou execute manualmente via GitHub Actions"
echo "  3. Workflow far√° deploy autom√°tico para:"
echo "     - VPS: $VPS_IP:3010"
echo "     - Dom√≠nio: $DOMAIN"
echo ""
echo "üîó Links √∫teis:"
echo "  - Reposit√≥rio: $REPO_URL"
echo "  - Actions: ${REPO_URL}actions"
echo "  - Settings: ${REPO_URL}settings/secrets/actions"
echo ""

log_success "Setup conclu√≠do! üéâ"

# === PR√ìXIMOS PASSOS ===
echo ""
log_info "üìã PR√ìXIMOS PASSOS:"
echo ""
echo "1. üåê Configurar DNS:"
echo "   - Apontar $DOMAIN para $VPS_IP"
echo "   - Configurar registros MX, SPF, DKIM"
echo "   - Consultar: DNS_EMAIL_CONFIGURATION.md"
echo ""
echo "2. üöÄ Fazer primeiro deploy:"
echo "   - git add ."
echo "   - git commit -m 'feat: add CI/CD workflow'"
echo "   - git push origin main"
echo ""
echo "3. üîç Monitorar deploy:"
echo "   - Acessar: ${REPO_URL}actions"
echo "   - Acompanhar logs em tempo real"
echo ""
echo "4. ‚úÖ Verificar resultado:"
echo "   - App: http://$DOMAIN"
echo "   - Health: http://$DOMAIN/health"
echo "   - SMTP: telnet $DOMAIN 25"
echo ""

log_success "Tudo pronto para deploy autom√°tico! üöÄ"