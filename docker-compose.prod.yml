# ðŸš€ UltraZend - Production Docker Compose
# Substitui completamente PM2 com orquestraÃ§Ã£o Docker robusta

version: '3.8'

services:
  # Backend Application
  ultrazend-backend:
    build: 
      context: ./backend
      target: production
    image: ultrazend/backend:latest
    container_name: ultrazend-backend
    
    # Restart policy (substitui PM2 restart)
    restart: unless-stopped
    
    # Health check configuration
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    
    # Environment variables
    environment:
      - NODE_ENV=production
      - PORT=3001
      - HOST=0.0.0.0
      - DATABASE_URL=/app/data/ultrazend.sqlite
      # Load additional env vars from file
    env_file:
      - ./configs/.env.production
    
    # Ports
    ports:
      - "3001:3001"    # API
      - "25:25"        # SMTP MX
      - "587:587"      # SMTP Submission
      - "465:465"      # SMTP SSL (se necessÃ¡rio)
    
    # Volumes for persistent data
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./certificates:/app/certificates
      - /etc/letsencrypt:/etc/letsencrypt:ro  # SSL certificates
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'
    
    # Dependency on Redis
    depends_on:
      redis:
        condition: service_healthy
    
    # Networks
    networks:
      - ultrazend-network
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
        labels: "service=ultrazend-backend"

  # Redis for queues and caching
  redis:
    image: redis:7-alpine
    container_name: ultrazend-redis
    restart: unless-stopped
    
    # Redis configuration
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    
    # Volumes for persistence
    volumes:
      - redis-data:/data
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
        reservations:
          memory: 64M
          cpus: '0.05'
    
    # Networks
    networks:
      - ultrazend-network
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "2"

# Networks
networks:
  ultrazend-network:
    driver: bridge
    name: ultrazend-network

# Volumes
volumes:
  redis-data:
    name: ultrazend-redis-data
  # Data volume will be mapped to host directory
