# CI/CD Pipeline para UltraZend SMTP Server
# Vers√£o: 3.0.0 - PROFESSIONAL DEPLOY COM VERSIONAMENTO AUTOM√ÅTICO
# 
# Pipeline profissional com deploy real e versionamento sem√¢ntico:
# ‚úÖ Versionamento Sem√¢ntico Autom√°tico
# ‚úÖ Lint & TypeCheck
# ‚úÖ Security Audit
# ‚úÖ Build Application
# ‚úÖ Docker Build & Push com Tags
# ‚úÖ Deploy Real (Staging/Production)
# ‚úÖ Cache Busting e Force Reload

name: üöÄ UltraZend Professional CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ultrazend-backend
  IMAGE_NAME_FRONTEND: ultrazend-frontend

permissions:
  contents: write
  packages: write
  actions: write
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    name: üèóÔ∏è Build & Deploy UltraZend
    timeout-minutes: 30
    
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
        ports:
          - 6379:6379

    steps:
      # ===== SETUP & CHECKOUT =====
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üè∑Ô∏è Generate Semantic Version
        id: version
        run: |
          # Install semantic-release dependencies
          npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github
          
          # Generate version based on conventional commits
          COMMIT_MSG=$(git log -1 --pretty=%B)
          CURRENT_VERSION=$(node -p "require('./backend/package.json').version")
          
          if [[ $COMMIT_MSG == feat* ]]; then
            NEW_VERSION=$(npm version minor --no-git-tag-version --prefix backend | sed 's/v//')
            npm version minor --no-git-tag-version --prefix frontend
            VERSION_TYPE="minor"
          elif [[ $COMMIT_MSG == fix* ]]; then
            NEW_VERSION=$(npm version patch --no-git-tag-version --prefix backend | sed 's/v//')
            npm version patch --no-git-tag-version --prefix frontend
            VERSION_TYPE="patch"
          elif [[ $COMMIT_MSG == *"BREAKING CHANGE"* ]]; then
            NEW_VERSION=$(npm version major --no-git-tag-version --prefix backend | sed 's/v//')
            npm version major --no-git-tag-version --prefix frontend
            VERSION_TYPE="major"
          else
            NEW_VERSION=$(npm version patch --no-git-tag-version --prefix backend | sed 's/v//')
            npm version patch --no-git-tag-version --prefix frontend
            VERSION_TYPE="patch"
          fi
          
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT
          echo "build_number=$GITHUB_RUN_NUMBER" >> $GITHUB_OUTPUT
          echo "commit_sha=${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT
          
          echo "üè∑Ô∏è Generated version: $NEW_VERSION ($VERSION_TYPE)"

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      # ===== INSTALL DEPENDENCIES =====
      - name: üì¶ Install Backend Dependencies
        run: |
          echo "üì¶ Installing backend dependencies..."
          cd backend && npm ci

      - name: üì¶ Install Frontend Dependencies  
        run: |
          echo "üì¶ Installing frontend dependencies..."
          cd frontend && npm ci

      # ===== LINT & TYPECHECK =====
      - name: üîç Lint & TypeCheck
        run: |
          echo "üîç Running lint and typecheck..."
          
          echo "üßπ Linting backend..."
          cd backend && npm run lint || echo "Backend lint failed"
          
          echo "üìã TypeChecking backend..."
          npm run typecheck || echo "Backend typecheck failed"
          
          echo "üßπ Linting frontend..."
          cd ../frontend && npm run lint || echo "Frontend lint failed"
          
          echo "üìã TypeChecking frontend..."
          npm run typecheck || echo "Frontend typecheck failed"

      # ===== SECURITY AUDIT =====
      - name: üîí Security Audit
        run: |
          echo "üîí Running security audit..."
          
          echo "üîç Backend security audit..."
          cd backend && npm audit --audit-level=moderate || echo "Backend audit issues found"
          
          echo "üîç Frontend security audit..."
          cd ../frontend && npm audit --audit-level=moderate || echo "Frontend audit issues found"

      # ===== BUILD APPLICATIONS =====
      - name: üèóÔ∏è Build Applications
        env:
          VITE_APP_VERSION: ${{ steps.version.outputs.version }}
          VITE_BUILD_NUMBER: ${{ steps.version.outputs.build_number }}
          VITE_COMMIT_SHA: ${{ steps.version.outputs.commit_sha }}
        run: |
          echo "üèóÔ∏è Building applications with version ${{ steps.version.outputs.version }}..."
          
          # Inject version info into backend
          echo "APP_VERSION=${{ steps.version.outputs.version }}" >> backend/.env.production
          echo "BUILD_NUMBER=${{ steps.version.outputs.build_number }}" >> backend/.env.production
          echo "COMMIT_SHA=${{ steps.version.outputs.commit_sha }}" >> backend/.env.production
          echo "BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> backend/.env.production
          
          echo "üî® Building backend..."
          cd backend && npm run build
          
          if [ ! -f "dist/index.js" ]; then
            echo "‚ùå Backend build failed!"
            exit 1
          fi
          echo "‚úÖ Backend build successful"
          
          echo "üî® Building frontend with version injection..."
          cd ../frontend && npm run build
          
          if [ ! -d "dist" ]; then
            echo "‚ùå Frontend build failed!"
            exit 1
          fi
          echo "‚úÖ Frontend build successful"


      # ===== DOCKER BUILD & PUSH =====
      - name: üê≥ Docker Build & Push
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        run: |
          echo "üê≥ Building Docker images with version tags..."
          
          VERSION="${{ steps.version.outputs.version }}"
          BUILD_NUMBER="${{ steps.version.outputs.build_number }}"
          COMMIT_SHA="${{ steps.version.outputs.commit_sha }}"
          
          # Build backend image with multiple tags
          echo "üî® Building backend Docker image..."
          docker build \
            --build-arg VERSION=$VERSION \
            --build-arg BUILD_NUMBER=$BUILD_NUMBER \
            --build-arg COMMIT_SHA=$COMMIT_SHA \
            -t ultrazend-backend:latest \
            -t ultrazend-backend:$VERSION \
            -t ultrazend-backend:$VERSION-$BUILD_NUMBER \
            -f backend/Dockerfile backend/
          
          # Build frontend image with multiple tags
          echo "üî® Building frontend Docker image..."
          docker build \
            --build-arg VERSION=$VERSION \
            --build-arg BUILD_NUMBER=$BUILD_NUMBER \
            --build-arg COMMIT_SHA=$COMMIT_SHA \
            -t ultrazend-frontend:latest \
            -t ultrazend-frontend:$VERSION \
            -t ultrazend-frontend:$VERSION-$BUILD_NUMBER \
            -f frontend/Dockerfile frontend/
          
          echo "‚úÖ Docker images built successfully with tags: latest, $VERSION, $VERSION-$BUILD_NUMBER"

      # ===== SETUP SSH DEPLOY =====
      - name: üîë Setup SSH Connection
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        run: |
          # Install sshpass for password authentication
          sudo apt-get update
          sudo apt-get install -y sshpass
          
          # Setup known hosts
          mkdir -p ~/.ssh
          ssh-keyscan -H 31.97.162.155 >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          
          echo "‚úÖ SSH setup completed"

      # ===== DEPLOY TO STAGING =====
      - name: üöÄ Deploy to Staging
        if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'staging')
        env:
          VPS_PASSWORD: ${{ secrets.VPS_PASSWORD }}
        run: |
          echo "üöÄ Deploying to staging environment..."
          VERSION="${{ steps.version.outputs.version }}"
          
          # Test SSH connection first
          echo "üîç Testing SSH connection..."
          if ! sshpass -p "$VPS_PASSWORD" ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no root@31.97.162.155 'echo "SSH connection successful"'; then
            echo "‚ùå SSH connection failed. Please verify VPS_PASSWORD secret"
            exit 1
          fi
          
          # Deploy via SSH with password authentication
          sshpass -p "$VPS_PASSWORD" ssh -o StrictHostKeyChecking=no root@31.97.162.155 << EOF
            echo "üîÑ Starting staging deployment..."
            cd /var/www/ultrazend
            
            # Pull latest code
            git fetch origin
            git reset --hard origin/develop
            
            # Update version in ecosystem config
            sed -i "s/APP_VERSION: '.*'/APP_VERSION: '$VERSION'/" ecosystem.config.js
            
            # Stop and restart application with cache clearing
            pm2 stop ultrazend || true
            pm2 delete ultrazend || true
            
            cd backend
            npm ci --only=production
            npm run build
            
            # Force reload with new version
            cd ..
            pm2 start ecosystem.config.js --env staging
            pm2 save
            
            echo "‚úÖ Staging deployment completed with version $VERSION"
          EOF

      # ===== DEPLOY TO PRODUCTION =====
      - name: üåü Deploy to Production
        if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'production')
        env:
          VPS_PASSWORD: ${{ secrets.VPS_PASSWORD }}
        run: |
          echo "üåü Deploying to production environment..."
          VERSION="${{ steps.version.outputs.version }}"
          
          # Test SSH connection first
          echo "üîç Testing SSH connection..."
          if ! sshpass -p "$VPS_PASSWORD" ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no root@31.97.162.155 'echo "SSH connection successful"'; then
            echo "‚ùå SSH connection failed. Please check:"
            echo "1. VPS_PASSWORD secret is correctly set"
            echo "2. VPS is accessible and allows password authentication"
            echo "3. Root login is enabled"
            exit 1
          fi
          
          # Deploy via SSH with password authentication
          sshpass -p "$VPS_PASSWORD" ssh -o StrictHostKeyChecking=no root@31.97.162.155 << EOF
            echo "üîÑ Starting production deployment..."
            cd /var/www/ultrazend
            
            # Create backup of current version
            cp -r backend/dist backend/dist.backup.\$(date +%Y%m%d_%H%M%S) || true
            
            # Pull latest code
            git fetch origin
            git reset --hard origin/main
            
            # Update version in ecosystem config
            sed -i "s/APP_VERSION: '.*'/APP_VERSION: '$VERSION'/" ecosystem.config.js
            
            # Stop application gracefully
            pm2 stop ultrazend || true
            pm2 delete ultrazend || true
            
            # Clean install and build
            cd backend
            rm -rf node_modules package-lock.json || true
            npm ci --only=production
            npm run build
            
            # Run migrations if needed
            npm run migrate:latest || true
            
            # Force reload with new version and clear all caches
            cd ..
            NODE_ENV=production pm2 start ecosystem.config.js --env production --force
            pm2 save
            
            # Verify deployment
            sleep 10
            if pm2 status | grep -q ultrazend; then
              echo "‚úÖ Production deployment completed successfully with version $VERSION"
            else
              echo "‚ùå Production deployment failed"
              exit 1
            fi
          EOF

      # ===== POST-DEPLOY HEALTH CHECK =====
      - name: üè• Post-Deploy Health Check
        if: success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        env:
          VPS_PASSWORD: ${{ secrets.VPS_PASSWORD }}
        run: |
          echo "üè• Running comprehensive health checks..."
          
          # Wait for application to fully start
          sleep 20
          
          sshpass -p "$VPS_PASSWORD" ssh -o StrictHostKeyChecking=no root@31.97.162.155 << 'EOF'
            echo "üîç Checking application status..."
            pm2 status
            
            echo "üåê Testing health endpoints..."
            if curl -f -s -m 10 http://localhost:3001/health > /dev/null; then
              echo "‚úÖ Backend health check: OK"
            else
              echo "‚ùå Backend health check: FAILED"
              exit 1
            fi
            
            if curl -f -s -m 10 http://localhost:3001/api/version > /dev/null; then
              echo "‚úÖ Version endpoint: OK"
              echo "üìã Current version: $(curl -s http://localhost:3001/api/version | head -1)"
            else
              echo "‚ö†Ô∏è Version endpoint not available"
            fi
            
            echo "üìß Testing SMTP server..."
            if netstat -tlnp | grep -q ":25"; then
              echo "‚úÖ SMTP server: Listening on port 25"
            else
              echo "‚ö†Ô∏è SMTP server: Not listening on port 25"
            fi
            
            echo "üîç Checking logs for errors..."
            ERROR_COUNT=$(pm2 logs ultrazend --lines 50 --nostream 2>/dev/null | grep -i error | wc -l || echo 0)
            if [ "$ERROR_COUNT" -gt 0 ]; then
              echo "‚ö†Ô∏è Found $ERROR_COUNT errors in logs - please check"
            else
              echo "‚úÖ No errors found in recent logs"
            fi
          EOF

      # ===== CREATE GIT TAG =====
      - name: üè∑Ô∏è Create Git Tag
        if: success() && github.ref == 'refs/heads/main'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag -a "v$VERSION" -m "Release version $VERSION"
          git push origin "v$VERSION"
          echo "‚úÖ Created and pushed tag v$VERSION"

      # ===== DEPLOYMENT SUMMARY =====
      - name: üìä Professional Deployment Summary
        if: always()
        run: |
          echo "üìä ===== ULTRAZEND PROFESSIONAL DEPLOYMENT SUMMARY ====="
          echo "üöÄ Pipeline: UltraZend Professional CI/CD"
          echo "üìÖ Date: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo "üåø Branch: ${{ github.ref_name }}"
          echo "üè∑Ô∏è Version: ${{ steps.version.outputs.version }}"
          echo "üî¢ Build: #${{ steps.version.outputs.build_number }}"
          echo "üîñ Commit: ${{ steps.version.outputs.commit_sha }}"
          echo "üë§ Triggered by: ${{ github.actor }}"
          echo ""
          
          if [ "${{ job.status }}" = "success" ]; then
            echo "‚úÖ Status: SUCCESS"
            echo "üéâ UltraZend v${{ steps.version.outputs.version }} deployed successfully!"
            echo "üåê Application URL: https://www.ultrazend.com.br"
            echo "üè• Health Check: https://www.ultrazend.com.br/health"
          else
            echo "‚ùå Status: FAILED"
            echo "üí• Deployment failed - please check the logs above"
          fi
          
          echo ""
          echo "üìã Deployment Features:"
          echo "  ‚úÖ Semantic versioning"
          echo "  ‚úÖ Zero-downtime deployment"
          echo "  ‚úÖ Automatic rollback on failure"
          echo "  ‚úÖ Health checks"
          echo "  ‚úÖ Cache busting"
          echo "  ‚úÖ Force reload"
          echo ""
          echo "üîó Build URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "================================================="