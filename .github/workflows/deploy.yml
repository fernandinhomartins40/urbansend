name: üöÄ Deploy UrbanSend Simple

concurrency:
  group: urbansend-simple-deploy
  cancel-in-progress: true

on:
  push:
    branches: 
      - main
  workflow_dispatch:

env:
  VPS_HOST: '72.60.10.112'
  VPS_USER: 'root'
  APP_DIR: '/var/www/urbansend'

jobs:
  deploy:
    name: üéØ Simple Deploy to VPS
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: üîç Workflow Debug
      run: |
        echo "=============================================="
        echo "üöÄ URBANSEND WORKFLOW EXECUTANDO!"
        echo "=============================================="
        echo "üì¶ Commit: ${{ github.sha }}"
        echo "üåø Branch: ${{ github.ref_name }}"
        echo "üë§ Actor: ${{ github.actor }}"
        echo "‚è∞ Timestamp: $(date -u)"
        echo "üéØ Target: ${{ env.VPS_HOST }}"
        echo "üîë Secret existe: ${{ secrets.VPS_PASSWORD != '' && 'SIM' || 'N√ÉO' }}"
        echo "=============================================="
        
        if [ -z "${{ secrets.VPS_PASSWORD }}" ]; then
          echo "‚ùå Secret VPS_PASSWORD n√£o est√° dispon√≠vel!"
          exit 1
        else
          echo "‚úÖ Secret VPS_PASSWORD configurado"
        fi
        
    - name: üì• Checkout Repository
      uses: actions/checkout@v4

    - name: üü¢ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: üèóÔ∏è Build Backend
      run: |
        echo "üèóÔ∏è Building backend..."
        cd backend
        npm ci --no-audit --no-fund
        npm run build
        echo "‚úÖ Backend build completo"
        ls -la dist/

    - name: ‚öõÔ∏è Build Frontend
      run: |
        echo "‚öõÔ∏è Building frontend..."
        cd frontend
        npm ci --no-audit --no-fund
        npm run build
        echo "‚úÖ Frontend build completo"
        ls -la dist/

    - name: üîß Setup SSH
      run: |
        echo "üîß Configurando SSH..."
        sudo apt-get update -qq
        sudo apt-get install -y sshpass
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        ssh-keyscan -H ${{ env.VPS_HOST }} >> ~/.ssh/known_hosts 2>/dev/null

    - name: üßπ Prepare VPS
      run: |
        echo "üßπ Preparando VPS..."
        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
        echo 'Atualizando sistema...'
        apt-get update -y > /dev/null
        
        echo 'Instalando Docker se necess√°rio...'
        if ! command -v docker >/dev/null; then
          curl -fsSL https://get.docker.com -o get-docker.sh
          sh get-docker.sh > /dev/null
          rm get-docker.sh
        fi
        systemctl start docker
        systemctl enable docker
        
        echo 'Criando diret√≥rio...'
        mkdir -p ${{ env.APP_DIR }}
        cd ${{ env.APP_DIR }}
        
        echo 'Parando containers existentes...'
        docker compose -f docker-compose.production.yml down 2>/dev/null || true
        docker container prune -f 2>/dev/null || true
        
        echo '‚úÖ VPS preparada'
        "

    - name: üì§ Deploy Files
      run: |
        echo "üì§ Enviando arquivos..."
        
        sshpass -p "${{ secrets.VPS_PASSWORD }}" scp -o StrictHostKeyChecking=no -r \
          backend/dist ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:${{ env.APP_DIR }}/backend-dist
        
        sshpass -p "${{ secrets.VPS_PASSWORD }}" scp -o StrictHostKeyChecking=no -r \
          frontend/dist ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:${{ env.APP_DIR }}/frontend-dist
        
        sshpass -p "${{ secrets.VPS_PASSWORD }}" scp -o StrictHostKeyChecking=no \
          backend/package.json \
          backend/knexfile.js \
          backend/knexfile.d.ts \
          ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:${{ env.APP_DIR }}/
        
        sshpass -p "${{ secrets.VPS_PASSWORD }}" scp -o StrictHostKeyChecking=no -r \
          backend/src/migrations ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:${{ env.APP_DIR }}/
        
        sshpass -p "${{ secrets.VPS_PASSWORD }}" scp -o StrictHostKeyChecking=no \
          docker-compose.production.yml \
          .env.production \
          nginx.conf \
          ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:${{ env.APP_DIR }}/

    - name: üöÄ Start Services
      run: |
        echo "üöÄ Iniciando servi√ßos..."
        
        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
        cd ${{ env.APP_DIR }}
        
        echo 'Instalando depend√™ncias...'
        npm ci --omit=dev --no-audit --no-fund
        
        echo 'Iniciando containers...'
        docker compose -f docker-compose.production.yml up -d --build
        
        echo 'Aguardando inicializa√ß√£o...'
        sleep 30
        
        echo 'Status dos containers:'
        docker compose -f docker-compose.production.yml ps
        
        echo '‚úÖ Servi√ßos iniciados'
        "

    - name: üè• Health Check
      run: |
        echo "üè• Verificando sa√∫de da aplica√ß√£o..."
        
        for i in {1..10}; do
          echo "Tentativa $i/10..."
          if curl -f http://${{ env.VPS_HOST }}:3010/health; then
            echo "‚úÖ Aplica√ß√£o est√° funcionando!"
            exit 0
          fi
          sleep 15
        done
        
        echo "‚ùå Aplica√ß√£o n√£o est√° respondendo"
        exit 1

    - name: ‚úÖ Deploy Success
      if: success()
      run: |
        echo "üéâ DEPLOY CONCLU√çDO COM SUCESSO!"
        echo "üåê Aplica√ß√£o: http://${{ env.VPS_HOST }}:3010"
        echo "üè• Health: http://${{ env.VPS_HOST }}:3010/health"
        echo "üìß SMTP: ${{ env.VPS_HOST }}:25"

    - name: ‚ùå Deploy Failed
      if: failure()
      run: |
        echo "‚ùå DEPLOY FALHOU!"
        echo "Verifique os logs acima para detalhes"