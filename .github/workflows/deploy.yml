# üöÄ Direct VPS Deploy - UrbanSend (No Docker)
# Direct deployment to VPS with nginx + PM2

name: üöÄ Deploy UrbanSend Direct

on:
  push:
    branches: [main]
    paths-ignore: ['*.md', 'docs/**']
  workflow_dispatch:

env:
  VPS_HOST: 31.97.162.155
  VPS_USER: root
  DEPLOY_PATH: /var/www/urbansend
  APP_DOMAIN: www.ultrazend.com.br

jobs:
  deploy:
    name: üöÄ Deploy Completo
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      # ==================== PREPARA√á√ÉO ====================
      - name: üì• 1Ô∏è‚É£ Checkout & Setup
        uses: actions/checkout@v4
        
      - name: üîß 2Ô∏è‚É£ Install Dependencies
        run: |
          echo "üîß Instalando depend√™ncias..."
          sudo apt-get update -qq
          sudo apt-get install -y sshpass curl
          
          echo "üîê Testando conex√£o SSH..."
          sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 \
            $VPS_USER@$VPS_HOST "echo '‚úÖ SSH conectado com sucesso'"

      # ==================== BUILD LOCAL ====================
      - name: üèóÔ∏è 3Ô∏è‚É£ Build Docker Image
        run: |
          echo "üèóÔ∏è Construindo imagem Docker..."
          docker build -t urbansend:latest . --no-cache
          
          echo "üìä Verificando imagem constru√≠da..."
          docker images | grep urbansend
          
          echo "üíæ Exportando imagem..."
          docker save urbansend:latest | gzip > urbansend-image.tar.gz
          IMAGE_SIZE=$(du -h urbansend-image.tar.gz | cut -f1)
          echo "üì¶ Tamanho da imagem: $IMAGE_SIZE"

      # ==================== PREPARAR VPS ====================
      - name: üõ†Ô∏è 4Ô∏è‚É£ Setup VPS Environment
        run: |
          echo "üõ†Ô∏è Configurando ambiente da VPS..."
          
          sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST << 'SCRIPT'
          set -e
          
          # Instalar Docker se necess√°rio
          if ! command -v docker >/dev/null 2>&1; then
            echo "üì¶ Instalando Docker..."
            curl -fsSL https://get.docker.com | sh
            systemctl enable docker
            systemctl start docker
          else
            echo "‚úÖ Docker j√° instalado"
          fi
          
          # Instalar Docker Compose
          if ! command -v docker-compose >/dev/null 2>&1; then
            echo "üì¶ Instalando Docker Compose..."
            curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-Linux-x86_64" \
              -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
          else
            echo "‚úÖ Docker Compose j√° instalado"
          fi
          
          # Criar diret√≥rios
          echo "üìÅ Criando diret√≥rios..."
          mkdir -p /opt/urbansend/{data,logs,backup}
          chmod -R 755 /opt/urbansend
          
          echo "‚úÖ VPS configurada"
          SCRIPT

      # ==================== TRANSFERIR ARQUIVOS ====================
      - name: üì§ 5Ô∏è‚É£ Transfer Files
        run: |
          echo "üì§ Enviando arquivos para VPS..."
          
          # Enviar imagem Docker
          echo "üê≥ Enviando imagem Docker..."
          sshpass -p "${{ secrets.VPS_PASSWORD }}" scp -o StrictHostKeyChecking=no \
            urbansend-image.tar.gz $VPS_USER@$VPS_HOST:$VPS_PATH/
          
          # Enviar docker-compose
          echo "üìã Enviando docker-compose.yml..."
          sshpass -p "${{ secrets.VPS_PASSWORD }}" scp -o StrictHostKeyChecking=no \
            docker-compose.yml $VPS_USER@$VPS_HOST:$VPS_PATH/
          
          # Enviar configura√ß√µes Docker
          echo "‚öôÔ∏è Enviando configura√ß√µes..."
          sshpass -p "${{ secrets.VPS_PASSWORD }}" scp -o StrictHostKeyChecking=no -r \
            docker/ $VPS_USER@$VPS_HOST:$VPS_PATH/
          
          echo "‚úÖ Todos os arquivos enviados"

      # ==================== CONFIGURAR PRODU√á√ÉO ====================
      - name: ‚öôÔ∏è 6Ô∏è‚É£ Configure Production
        run: |
          echo "‚öôÔ∏è Configurando ambiente de produ√ß√£o..."
          
          sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST << 'CONFIG'
          cd /opt/urbansend
          
          # Criar .env de produ√ß√£o
          cat > docker/.env.production << 'ENV'
          NODE_ENV=production
          PORT=3001
          INTERNAL_PORT=3010
          DOMAIN=www.ultrazend.com.br
          PUBLIC_URL=http://www.ultrazend.com.br
          API_URL=http://www.ultrazend.com.br/api
          DATABASE_URL=/app/data/database.sqlite
          JWT_SECRET=urbansend_jwt_secret_key_production_2024_secure_32_chars_minimum
          COOKIE_SECRET=urbansend_cookie_secret_production_2024_secure_32_chars_min
          API_KEY_SALT=urbansend_api_key_salt_production_2024_secure_32_chars_min
          ALLOWED_ORIGINS=http://www.ultrazend.com.br,https://www.ultrazend.com.br
          SMTP_SERVER_PORT=25
          SMTP_HOSTNAME=www.ultrazend.com.br
          FROM_EMAIL=noreply@ultrazend.com.br
          FROM_NAME=UltraZend
          LOG_LEVEL=info
          RATE_LIMIT_MAX_REQUESTS=100
          ENV
          
          # Tornar scripts execut√°veis
          chmod +x docker/start.sh 2>/dev/null || true
          
          echo "‚úÖ Configura√ß√£o de produ√ß√£o criada"
          CONFIG

      # ==================== DEPLOY APLICA√á√ÉO ====================
      - name: üöÄ 7Ô∏è‚É£ Deploy Application
        run: |
          echo "üöÄ Fazendo deploy da aplica√ß√£o..."
          
          sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST << 'DEPLOY'
          set -e
          cd /opt/urbansend
          
          # Parar aplica√ß√£o existente
          echo "üõë Parando aplica√ß√£o existente..."
          docker-compose down --remove-orphans 2>/dev/null || true
          
          # Limpar imagens antigas mais agressivamente
          echo "üßπ Limpando imagens antigas..."
          docker rmi urbansend:latest 2>/dev/null || true
          docker system prune -af >/dev/null 2>&1 || true
          
          # Carregar nova imagem
          echo "üì¶ Carregando nova imagem Docker..."
          gunzip -c urbansend-image.tar.gz | docker load
          
          # Verificar imagem carregada
          echo "üîç Verificando imagem carregada..."
          docker images | grep urbansend || echo "‚ö†Ô∏è Imagem n√£o encontrada"
          
          # Iniciar aplica√ß√£o
          echo "‚ñ∂Ô∏è Iniciando nova aplica√ß√£o..."
          docker-compose up -d
          
          # Aguardar inicializa√ß√£o
          echo "‚è≥ Aguardando inicializa√ß√£o (30s)..."
          sleep 30
          
          # Verificar status
          echo "üîç Verificando status dos containers..."
          docker-compose ps
          
          if docker-compose ps | grep -q "Up"; then
            echo "‚úÖ Aplica√ß√£o iniciada com sucesso"
          else
            echo "‚ùå Falha ao iniciar aplica√ß√£o"
            echo "üìã Logs completos do container:"
            docker logs urbansend-app --timestamps
            echo ""
            echo "üìã Logs via docker-compose (√∫ltimas 50 linhas):"
            docker-compose logs --tail 50
            echo ""
            echo "üîç Status detalhado dos containers:"
            docker ps -a
            echo ""
            echo "üîç Inspecionando container:"
            docker inspect urbansend-app | grep -A 10 -B 5 "Status\|RestartCount\|Error" || true
            echo ""
            echo "üîç Verificando portas em uso:"
            netstat -tlnp | grep -E ":3010|:25" || echo "Nenhuma porta 3010 ou 25 em uso"
            echo ""
            echo "üîç Tentando executar comando dentro do container:"
            docker exec urbansend-app whoami || echo "Container n√£o permite exec"
            docker exec urbansend-app ls -la /app/ || echo "Container n√£o permite exec"
            exit 1
          fi
          
          # Limpeza
          rm -f urbansend-image.tar.gz
          echo "üéâ Deploy conclu√≠do!"
          DEPLOY

      # ==================== VERIFICA√á√ïES FINAIS ====================
      - name: üß™ 8Ô∏è‚É£ Health Check
        run: |
          echo "üß™ Executando verifica√ß√µes de sa√∫de..."
          
          # Aguardar estabiliza√ß√£o
          sleep 15
          
          # Testar endpoint de sa√∫de
          echo "üè• Testando endpoint /health..."
          HEALTH_OK=false
          
          for i in {1..10}; do
            echo "üîÑ Tentativa $i/10..."
            
            if curl -f --connect-timeout 5 --max-time 10 "http://$VPS_HOST:$APP_PORT/health" 2>/dev/null; then
              echo "‚úÖ Health check passou na tentativa $i"
              HEALTH_OK=true
              break
            fi
            
            if [ $i -lt 10 ]; then
              sleep 10
            fi
          done
          
          if [ "$HEALTH_OK" = false ]; then
            echo "‚ùå Health check falhou ap√≥s 10 tentativas"
            echo "üîç Verificando status da VPS..."
            sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST \
              "cd /opt/urbansend && docker-compose logs --tail 20"
            exit 1
          fi
          
          # Testar p√°gina principal
          echo "üåê Testando p√°gina principal..."
          if curl -f --connect-timeout 5 --max-time 10 "http://$VPS_HOST:$APP_PORT/" >/dev/null 2>&1; then
            echo "‚úÖ P√°gina principal respondendo"
          else
            echo "‚ö†Ô∏è P√°gina principal n√£o responde (pode ser normal)"
          fi

      # ==================== RESUMO FINAL ====================
      - name: üìä 9Ô∏è‚É£ Summary
        run: |
          echo ""
          echo "üéâ ===== DEPLOY CONCLU√çDO COM SUCESSO ====="
          echo ""
          echo "üìã INFORMA√á√ïES DO DEPLOY:"
          echo "  üåê Dom√≠nio: www.ultrazend.com.br"
          echo "  üîå IP VPS: $VPS_HOST"
          echo "  üö™ Porta: $APP_PORT"
          echo "  üìß SMTP: Porta 25"
          echo "  ‚è∞ Deploy: $(date '+%d/%m/%Y %H:%M:%S')"
          echo ""
          echo "üîó URLS DISPON√çVEIS:"
          echo "  üì± App: http://$VPS_HOST:$APP_PORT"
          echo "  üè• Health: http://$VPS_HOST:$APP_PORT/health"
          echo "  üåê Dom√≠nio: http://www.ultrazend.com.br:$APP_PORT"
          echo ""
          echo "‚úÖ Aplica√ß√£o UrbanSend est√° online!"