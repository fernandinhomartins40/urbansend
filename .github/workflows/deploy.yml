# 🚀 Direct VPS Deploy - UltraZend (No Docker)
# Direct deployment to VPS with nginx + PM2

name: 🚀 Deploy UltraZend Direct

on:
  push:
    branches: [main]
    paths-ignore: ['*.md', 'docs/**']
  workflow_dispatch:

env:
  VPS_HOST: 31.97.162.155
  VPS_USER: root
  DEPLOY_PATH: /var/www/urbansend
  APP_DOMAIN: www.ultrazend.com.br

jobs:
  deploy:
    name: 🚀 Deploy Completo
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      # ==================== PREPARAÇÃO ====================
      - name: 📥 1️⃣ Checkout & Setup
        uses: actions/checkout@v4
        
      - name: 🔧 2️⃣ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: 📦 3️⃣ Install Dependencies & Build
        run: |
          echo "📦 Instalando dependências do backend..."
          cd backend && npm ci
          
          echo "🏗️ Construindo backend..."
          npm run build
          
          echo "📦 Instalando dependências do frontend..."
          cd ../frontend && npm ci
          
          echo "🏗️ Construindo frontend..."
          npm run build

      - name: 🔧 4️⃣ Install SSH Tools
        run: |
          echo "🔧 Instalando ferramentas SSH..."
          sudo apt-get update -qq
          sudo apt-get install -y sshpass rsync
          
          echo "🔐 Testando conexão SSH..."
          sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 \
            $VPS_USER@$VPS_HOST "echo '✅ SSH conectado com sucesso'"

      # ==================== PREPARAR VPS ====================
      - name: 🛠️ 5️⃣ Setup VPS Environment
        run: |
          echo "🛠️ Configurando ambiente da VPS..."
          
          sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST << 'SCRIPT'
          set -e
          
          # Instalar Node.js se necessário
          if ! command -v node >/dev/null 2>&1; then
            echo "📦 Instalando Node.js..."
            curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
            apt-get install -y nodejs
          else
            echo "✅ Node.js já instalado: $(node -v)"
          fi
          
          # Instalar PM2 globalmente
          if ! command -v pm2 >/dev/null 2>&1; then
            echo "📦 Instalando PM2..."
            npm install -g pm2
          else
            echo "✅ PM2 já instalado"
          fi
          
          # Instalar nginx se necessário
          if ! command -v nginx >/dev/null 2>&1; then
            echo "📦 Instalando nginx..."
            apt-get update
            apt-get install -y nginx
            systemctl enable nginx
          else
            echo "✅ nginx já instalado"
          fi
          
          # Criar estrutura de diretórios
          echo "📁 Criando estrutura de diretórios..."
          mkdir -p $DEPLOY_PATH/{backend,frontend,data,logs,backup}
          chown -R www-data:www-data $DEPLOY_PATH
          chmod 755 $DEPLOY_PATH
          
          echo "✅ VPS configurada"
          SCRIPT

      # ==================== TRANSFERIR ARQUIVOS ====================
      - name: 📤 6️⃣ Transfer Files
        run: |
          echo "📤 Enviando arquivos para VPS..."
          
          # Enviar backend build
          echo "🏗️ Enviando backend..."
          sshpass -p "${{ secrets.VPS_PASSWORD }}" rsync -avz --delete \
            --exclude=node_modules backend/ $VPS_USER@$VPS_HOST:$DEPLOY_PATH/backend/
          
          # Enviar frontend build
          echo "🌐 Enviando frontend..."
          sshpass -p "${{ secrets.VPS_PASSWORD }}" rsync -avz --delete \
            frontend/dist/ $VPS_USER@$VPS_HOST:$DEPLOY_PATH/frontend/
          
          # Enviar configurações
          echo "⚙️ Enviando configurações..."
          sshpass -p "${{ secrets.VPS_PASSWORD }}" scp -o StrictHostKeyChecking=no \
            configs/nginx.conf $VPS_USER@$VPS_HOST:/tmp/urbansend-nginx.conf
          sshpass -p "${{ secrets.VPS_PASSWORD }}" scp -o StrictHostKeyChecking=no \
            configs/ecosystem.config.js $VPS_USER@$VPS_HOST:$DEPLOY_PATH/
          sshpass -p "${{ secrets.VPS_PASSWORD }}" scp -o StrictHostKeyChecking=no \
            configs/.env.production $VPS_USER@$VPS_HOST:$DEPLOY_PATH/backend/.env
          
          echo "✅ Todos os arquivos enviados"

      # ==================== CONFIGURAR PRODUÇÃO ====================
      - name: ⚙️ 7️⃣ Configure Production
        run: |
          echo "⚙️ Configurando ambiente de produção..."
          
          sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST << 'CONFIG'
          set -e
          cd $DEPLOY_PATH
          
          # Instalar dependências de produção no backend
          echo "📦 Instalando dependências de produção..."
          cd backend
          npm ci --only=production
          
          # Configurar nginx
          echo "🌐 Configurando nginx..."
          cp /tmp/urbansend-nginx.conf /etc/nginx/sites-available/urbansend
          ln -sf /etc/nginx/sites-available/urbansend /etc/nginx/sites-enabled/
          rm -f /etc/nginx/sites-enabled/default
          nginx -t && systemctl reload nginx
          
          # Executar migrações do banco
          echo "💾 Executando migrações..."
          npm run migrate:latest || echo "Migrações não encontradas ou falhou"
          
          echo "✅ Configuração de produção concluída"
          CONFIG

      # ==================== DEPLOY APLICAÇÃO ====================
      - name: 🚀 8️⃣ Deploy Application
        run: |
          echo "🚀 Fazendo deploy da aplicação..."
          
          sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST << 'DEPLOY'
          set -e
          cd $DEPLOY_PATH
          
          # Parar aplicação existente
          echo "🛑 Parando aplicação existente..."
          pm2 delete urbansend 2>/dev/null || echo "Nenhuma aplicação rodando"
          
          # Iniciar aplicação com PM2
          echo "▶️ Iniciando aplicação com PM2..."
          pm2 start ecosystem.config.js
          
          # Salvar configuração PM2
          pm2 save
          pm2 startup | tail -1 | bash || echo "PM2 startup já configurado"
          
          # Aguardar inicialização
          echo "⏳ Aguardando inicialização (15s)..."
          sleep 15
          
          # Verificar status
          echo "🔍 Verificando status da aplicação..."
          pm2 status
          
          if pm2 list | grep -q "online"; then
            echo "✅ Aplicação iniciada com sucesso"
          else
            echo "❌ Falha ao iniciar aplicação"
            echo "📋 Logs da aplicação:"
            pm2 logs urbansend --lines 20
            echo ""
            echo "🔍 Verificando portas em uso:"
            netstat -tlnp | grep ":3001" || echo "Porta 3001 não está em uso"
            exit 1
          fi
          
          echo "🎉 Deploy concluído!"
          DEPLOY

      # ==================== VERIFICAÇÕES FINAIS ====================
      - name: 🧪 9️⃣ Health Check
        run: |
          echo "🧪 Executando verificações de saúde..."
          
          # Aguardar estabilização
          sleep 10
          
          # Testar endpoint de saúde
          echo "🏥 Testando endpoint /health..."
          HEALTH_OK=false
          
          for i in {1..10}; do
            echo "🔄 Tentativa $i/10..."
            
            if curl -f --connect-timeout 5 --max-time 10 "http://$VPS_HOST/api/health" 2>/dev/null; then
              echo "✅ Health check passou na tentativa $i"
              HEALTH_OK=true
              break
            fi
            
            if [ $i -lt 10 ]; then
              sleep 10
            fi
          done
          
          if [ "$HEALTH_OK" = false ]; then
            echo "❌ Health check falhou após 10 tentativas"
            echo "🔍 Verificando status da VPS..."
            sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST \
              "cd $DEPLOY_PATH && pm2 logs urbansend --lines 20"
            exit 1
          fi
          
          # Testar página principal
          echo "🌐 Testando página principal..."
          if curl -f --connect-timeout 5 --max-time 10 "http://$VPS_HOST/" >/dev/null 2>&1; then
            echo "✅ Página principal respondendo"
          else
            echo "⚠️ Página principal não responde (pode ser normal)"
          fi

      # ==================== RESUMO FINAL ====================
      - name: 📊 🔟 Summary
        run: |
          echo ""
          echo "🎉 ===== DEPLOY CONCLUÍDO COM SUCESSO ====="
          echo ""
          echo "📋 INFORMAÇÕES DO DEPLOY:"
          echo "  🌐 Domínio: www.ultrazend.com.br"
          echo "  🔌 IP VPS: $VPS_HOST"
          echo "  🚪 Backend: Porta 3001 (via nginx)"
          echo "  🌐 Frontend: nginx porta 80"
          echo "  📧 SMTP: Porta 25"
          echo "  ⏰ Deploy: $(date '+%d/%m/%Y %H:%M:%S')"
          echo ""
          echo "🔗 URLS DISPONÍVEIS:"
          echo "  🌐 App: http://www.ultrazend.com.br"
          echo "  🏥 Health: http://www.ultrazend.com.br/api/health"
          echo "  📱 Direct IP: http://$VPS_HOST"
          echo ""
          echo "✅ Aplicação UltraZend está online!"