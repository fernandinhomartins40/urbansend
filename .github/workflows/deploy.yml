name: 🚀 Deploy UrbanSend Email System

concurrency:
  group: urbansend-production-deploy
  cancel-in-progress: true

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  VPS_HOST: '72.60.10.112'
  VPS_USER: 'root'
  APP_DIR: '/root/urbansend'
  APP_PORT: '3010'
  SMTP_PORT: '25'
  CONTAINER_NAME: 'urbansend_app'
  REDIS_PORT: '6380'

jobs:
  deploy:
    name: 🎯 Deploy UrbanSend Container
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: 📋 Informações do Deploy
      run: |
        echo "=============================================="
        echo "🚀 INICIANDO DEPLOY URBANSEND EMAIL SYSTEM"
        echo "=============================================="
        echo "📦 Commit: ${{ github.sha }}"
        echo "🌿 Branch: ${{ github.ref_name }}"
        echo "👤 Actor: ${{ github.actor }}"
        echo "⏰ Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
        echo "🎯 Target: ${{ env.VPS_HOST }}:${{ env.APP_PORT }}"
        echo "📧 SMTP: ${{ env.VPS_HOST }}:${{ env.SMTP_PORT }}"
        echo "🔄 Redis: Port ${{ env.REDIS_PORT }}"
        echo "=============================================="
        
        # Variável para tracking do tempo
        echo "DEPLOY_START_TIME=$(date +%s)" >> $GITHUB_ENV

    - name: 🔧 Configurar SSH e Ferramentas
      run: |
        echo "🔧 Configurando SSH e ferramentas necessárias..."
        sudo apt-get update -qq
        sudo apt-get install -y sshpass rsync curl jq
        
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        ssh-keyscan -H ${{ env.VPS_HOST }} >> ~/.ssh/known_hosts 2>/dev/null
        
        echo "🔐 Testando conexão SSH..."
        if sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "echo '✅ SSH funcionando'"; then
          echo "✅ SSH configurado com sucesso"
        else
          echo "❌ Falha na conexão SSH"
          exit 1
        fi

    - name: 📥 Checkout do Código
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: 📦 Cache npm dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.npm
          frontend/node_modules
          backend/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: 📊 Análise Pre-Deploy
      run: |
        echo "📊 Analisando estrutura do projeto UrbanSend..."
        echo "============================================="
        
        echo "📁 Estrutura raiz:"
        ls -la
        
        echo ""
        echo "📁 Backend:"
        if [ -d "backend" ]; then
          ls -la backend/
          if [ -f "backend/package.json" ]; then
            echo "✅ package.json encontrado"
            echo "📦 Dependências principais:"
            cat backend/package.json | jq -r '.dependencies | keys | .[]' | head -5
            echo "🔧 Scripts disponíveis:"
            cat backend/package.json | jq -r '.scripts | keys | .[]'
          fi
        else
          echo "❌ Diretório backend não encontrado"
          exit 1
        fi
        
        echo ""
        echo "📁 Frontend:"
        if [ -d "frontend" ]; then
          ls -la frontend/
          if [ -f "frontend/package.json" ]; then
            echo "✅ package.json encontrado"
            echo "📦 Dependências principais:"
            cat frontend/package.json | jq -r '.dependencies | keys | .[]' | head -5
            echo "🔧 Scripts disponíveis:"
            cat frontend/package.json | jq -r '.scripts | keys | .[]'
          fi
        else
          echo "❌ Diretório frontend não encontrado"
          exit 1
        fi
        
        echo ""
        echo "🐳 Docker:"
        ls -la Dockerfile docker-compose.production.yml nginx.conf 2>/dev/null || echo "⚠️ Alguns arquivos Docker podem estar ausentes"
        
        echo ""
        echo "📧 SMTP Server:"
        if grep -r "smtp" backend/src/ >/dev/null 2>&1; then
          echo "✅ Servidor SMTP encontrado no backend"
        else
          echo "⚠️ Servidor SMTP pode não estar configurado"
        fi

    - name: 🏗️ Build Local do Backend
      run: |
        echo "🏗️ Iniciando build local do backend UrbanSend..."
        echo "==============================================="
        
        cd backend
        
        echo "📦 Instalando dependências do backend..."
        if [ -f "package-lock.json" ]; then
          echo "🔒 Usando package-lock.json com npm ci"
          npm ci
        else
          echo "📦 package-lock.json não encontrado, usando npm install"
          npm install
        fi
        echo "✅ Dependências do backend instaladas"
        
        echo "🔨 Compilando TypeScript..."
        if npm run build; then
          echo "✅ Build do backend concluído com sucesso"
          echo "📊 Analisando build:"
          ls -la dist/
          echo "📈 Tamanho do build: $(du -sh dist/)"
          echo "📝 Arquivos gerados: $(find dist/ -type f | wc -l)"
          echo "📧 Verificando SMTP server:"
          find dist/ -name "*smtp*" -o -name "*mail*" | head -5
        else
          echo "❌ Falha no build do backend"
          exit 1
        fi

    - name: ⚛️ Build Local do Frontend  
      run: |
        echo "⚛️ Iniciando build local do frontend UrbanSend..."
        echo "================================================"
        
        cd frontend
        
        echo "📦 Instalando dependências do frontend..."
        if [ -f "package-lock.json" ]; then
          echo "🔒 Usando package-lock.json com npm ci"
          npm ci
        else
          echo "📦 package-lock.json não encontrado, usando npm install"
          npm install
        fi
        echo "✅ Dependências do frontend instaladas"
        
        echo "🔨 Compilando React/Vite..."
        if npm run build; then
          echo "✅ Build do frontend concluído com sucesso"
          echo "📊 Analisando build:"
          ls -la dist/
          echo "📈 Tamanho do build: $(du -sh dist/)"
          echo "📝 Arquivos gerados: $(find dist/ -type f | wc -l)"
          
          # Verificar se arquivos essenciais foram gerados
          if [ -f "dist/index.html" ]; then
            echo "✅ index.html encontrado"
          else
            echo "❌ index.html não encontrado"
            exit 1
          fi
        else
          echo "❌ Falha no build do frontend"
          exit 1
        fi

    - name: 🧹 Preparar VPS para UrbanSend
      run: |
        echo "🧹 Preparando ambiente UrbanSend na VPS..."
        echo "========================================="
        
        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
        echo '🔄 Atualizando sistema...'
        apt-get update -y > /dev/null 2>&1
        
        echo '🟢 Verificando Node.js 20.x...'
        if ! command -v node >/dev/null || [ \$(node --version | cut -d'v' -f2 | cut -d'.' -f1) -lt 20 ]; then
          curl -fsSL https://deb.nodesource.com/setup_20.x | bash - > /dev/null 2>&1
          apt-get install -y nodejs > /dev/null 2>&1
        fi
        
        echo '🐳 Configurando Docker...'
        if ! command -v docker >/dev/null; then
          apt-get remove -y docker docker-engine docker.io containerd runc containerd.io 2>/dev/null || true
          apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release > /dev/null 2>&1
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg 2>/dev/null
          echo \"deb [arch=\$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \$(lsb_release -cs) stable\" | tee /etc/apt/sources.list.d/docker.list > /dev/null
          apt-get update -y > /dev/null 2>&1
          apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin > /dev/null 2>&1
          systemctl start docker
          systemctl enable docker
        fi
        
        echo '📧 Configurando portas para SMTP...'
        ufw allow ${{ env.SMTP_PORT }}/tcp comment 'UrbanSend SMTP' 2>/dev/null || true
        ufw allow ${{ env.APP_PORT }}/tcp comment 'UrbanSend App' 2>/dev/null || true
        ufw allow ${{ env.REDIS_PORT }}/tcp comment 'UrbanSend Redis' 2>/dev/null || true
        
        echo '✅ Versões instaladas:'
        node --version
        npm --version
        docker --version
        "

    - name: 🧹 Limpeza de Containers UrbanSend
      run: |
        echo "🧹 Removendo containers UrbanSend antigos..."
        echo "==========================================="
        
        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
        echo '🛑 Parando containers UrbanSend...'
        
        # Usar docker-compose para parar na pasta específica
        cd ${{ env.APP_DIR }} 2>/dev/null && docker-compose -f docker-compose.production.yml down --remove-orphans 2>/dev/null || true
        
        # Parar containers específicos do UrbanSend
        docker stop urbansend_app urbansend_redis urbansend_redis_ui 2>/dev/null && echo '✅ Containers UrbanSend parados' || echo 'ℹ️  Nenhum container UrbanSend rodando'
        docker rm urbansend_app urbansend_redis urbansend_redis_ui 2>/dev/null && echo '✅ Containers UrbanSend removidos' || echo 'ℹ️  Nenhum container UrbanSend para remover'
        
        echo '🗑️  Removendo imagens UrbanSend antigas...'
        docker rmi urbansend_urbansend_app:latest urbansend-redis:latest 2>/dev/null && echo '✅ Imagens UrbanSend removidas' || echo 'ℹ️  Nenhuma imagem UrbanSend para remover'
        
        echo '🧽 Limpeza específica do UrbanSend...'
        docker network rm urbansend_network 2>/dev/null && echo '✅ Network UrbanSend removida' || echo 'ℹ️  Network não encontrada'
        
        echo '📁 Preparando diretório UrbanSend...'
        rm -rf ${{ env.APP_DIR }}
        mkdir -p ${{ env.APP_DIR }}
        echo '✅ Diretório UrbanSend preparado'
        "

    - name: 📤 Transferir Código UrbanSend para VPS
      run: |
        echo "📤 Transferindo código UrbanSend para VPS..."
        echo "==========================================="
        
        echo "📊 Analisando arquivos a transferir..."
        echo "Tamanho total: $(du -sh . | cut -f1)"
        
        echo "🚀 Iniciando transferência UrbanSend..."
        if sshpass -p "${{ secrets.VPS_PASSWORD }}" rsync -avz --progress --delete \
          --exclude='.git/' \
          --exclude='node_modules/' \
          --exclude='frontend/node_modules/' \
          --exclude='backend/node_modules/' \
          --exclude='.claude/' \
          --exclude='deploy.yml' \
          -e "ssh -o StrictHostKeyChecking=no" \
          ./ ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:${{ env.APP_DIR }}/; then
          echo "✅ Código UrbanSend transferido com sucesso"
        else
          echo "❌ Falha na transferência"
          exit 1
        fi

    - name: 🐳 Build e Deploy Container UrbanSend
      run: |
        echo "🐳 Construindo e deployando container UrbanSend..."
        echo "================================================="
        
        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
        cd ${{ env.APP_DIR }}
        
        echo '📋 Verificando estrutura transferida...'
        ls -la
        
        echo '🔍 Verificando arquivos Docker...'
        ls -la Dockerfile docker-compose.production.yml nginx.conf 2>/dev/null || echo '⚠️ Alguns arquivos Docker podem estar ausentes'
        
        echo '🏗️ Construindo container UrbanSend (isso pode levar alguns minutos)...'
        if docker-compose -f docker-compose.production.yml build --no-cache; then
          echo '✅ Container UrbanSend construído com sucesso'
        else
          echo '❌ Falha na construção do container UrbanSend'
          exit 1
        fi
        
        echo '🚀 Iniciando container UrbanSend...'
        if docker-compose -f docker-compose.production.yml up -d; then
          echo '✅ Container UrbanSend iniciado'
        else
          echo '❌ Falha ao iniciar container UrbanSend'
          exit 1
        fi
        
        echo '📊 Status dos containers UrbanSend:'
        docker-compose -f docker-compose.production.yml ps
        "

    - name: 🔧 Configurar Nginx para UrbanSend
      run: |
        echo "🔧 Configurando Nginx para UrbanSend..."
        echo "======================================"
        
        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
        echo '🔧 Atualizando configuração do nginx para porta ${{ env.APP_PORT }}...'
        sed -i 's/localhost:3020/localhost:${{ env.APP_PORT }}/g' /etc/nginx/sites-available/urbanmail.com.br 2>/dev/null || true
        sed -i 's/localhost:3011/localhost:${{ env.APP_PORT }}/g' /etc/nginx/sites-available/urbanmail.com.br 2>/dev/null || true
        
        echo '🔍 Testando configuração do nginx...'
        if nginx -t; then
          echo '✅ Configuração do nginx válida'
          systemctl reload nginx
          echo '✅ Nginx recarregado'
        else
          echo '⚠️ Problema na configuração do nginx, mas continuando...'
        fi
        "

    - name: 🏥 Health Checks UrbanSend
      run: |
        echo "🏥 Executando health checks UrbanSend..."
        echo "======================================="
        
        # Função para health check com retry
        health_check() {
          local url=$1
          local name=$2
          local max_attempts=20
          local delay=15
          
          echo "🔍 Verificando $name..."
          
          for attempt in $(seq 1 $max_attempts); do
            local total_wait=$((attempt * delay))
            echo "⏳ Tentativa $attempt/$max_attempts (${total_wait}s total) - $name"
            
            local response=$(curl -s -o /dev/null -w "%{http_code}|%{time_total}" "$url" 2>/dev/null || echo "000|0")
            local http_code=$(echo $response | cut -d'|' -f1)
            local time_total=$(echo $response | cut -d'|' -f2)
            
            case $http_code in
              200)
                echo "✅ $name: Respondendo corretamente (${time_total}s)"
                return 0
                ;;
              000)
                echo "⏳ $name: Serviço ainda não responde..."
                ;;
              *)
                echo "⚠️  $name: HTTP $http_code (aguardando...)"
                ;;
            esac
            
            if [ $attempt -lt $max_attempts ]; then
              sleep $delay
            fi
          done
          
          echo "❌ $name: Falhou após ${max_attempts} tentativas (${total_wait}s total)"
          return 1
        }
        
        echo ""
        echo "🏥 Aguardando inicialização completa UrbanSend (90s)..."
        sleep 90
        
        # Health check da aplicação unificada
        if health_check "http://${{ env.VPS_HOST }}:${{ env.APP_PORT }}/health" "UrbanSend App"; then
          echo "✅ UrbanSend está funcionando!"
        else
          echo "❌ UrbanSend não está respondendo"
          URBANSEND_FAILED=1
        fi
        
        echo ""
        
        # Verificar porta SMTP
        echo "🔍 Verificando servidor SMTP na porta ${{ env.SMTP_PORT }}..."
        if timeout 10 bash -c "</dev/tcp/${{ env.VPS_HOST }}/${{ env.SMTP_PORT }}" 2>/dev/null; then
          echo "✅ Servidor SMTP respondendo na porta ${{ env.SMTP_PORT }}"
        else
          echo "⚠️ Servidor SMTP pode não estar respondendo na porta ${{ env.SMTP_PORT }}"
        fi
        
        # Verificar logs se houver falha
        if [ "${URBANSEND_FAILED}" = "1" ]; then
          echo ""
          echo "🔍 Coletando logs UrbanSend para diagnóstico..."
          echo "============================================="
          
          sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          cd ${{ env.APP_DIR }}
          echo '📋 Status dos containers UrbanSend:'
          docker-compose -f docker-compose.production.yml ps
          echo ''
          echo '📝 Logs recentes UrbanSend (últimas 50 linhas):'
          docker-compose -f docker-compose.production.yml logs --tail=50
          "
          
          exit 1
        fi

    - name: ✅ Verificação Final UrbanSend
      if: success()
      run: |
        DEPLOY_END_TIME=$(date +%s)
        DEPLOY_DURATION=$((DEPLOY_END_TIME - DEPLOY_START_TIME))
        DURATION_FORMATTED=$(printf '%02d:%02d:%02d' $((DEPLOY_DURATION/3600)) $((DEPLOY_DURATION%3600/60)) $((DEPLOY_DURATION%60)))
        
        echo "🎉 URBANSEND DEPLOY CONCLUÍDO COM SUCESSO!"
        echo "=========================================="
        echo "⏱️  Tempo total: $DURATION_FORMATTED"
        echo "🌐 Aplicação: https://urbanmail.com.br"
        echo "🔌 Endpoint: http://${{ env.VPS_HOST }}:${{ env.APP_PORT }}"
        echo "📧 SMTP Server: ${{ env.VPS_HOST }}:${{ env.SMTP_PORT }}"
        echo "🔄 Redis: Port ${{ env.REDIS_PORT }}"
        echo "🏥 Health Check: http://${{ env.VPS_HOST }}:${{ env.APP_PORT }}/health"
        echo "📊 Status: ONLINE ✅"
        echo ""
        
        # Verificação final dos serviços UrbanSend
        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
        cd ${{ env.APP_DIR }}
        echo '📊 Status final dos containers UrbanSend:'
        docker ps --filter 'name=urbansend' --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'
        echo ''
        echo '💾 Uso de recursos UrbanSend:'
        docker stats --no-stream --format 'table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}' \$(docker ps --filter 'name=urbansend' -q) 2>/dev/null || echo 'Containers ainda inicializando...'
        echo ''
        echo '🔍 Portas em uso:'
        netstat -tlnp | grep -E ':(${{ env.APP_PORT }}|${{ env.SMTP_PORT }}|${{ env.REDIS_PORT }})' || echo 'Verificando portas...'
        "
        
        echo ""
        echo "🎊🎊🎊 URBANSEND DEPLOY FINALIZADO COM SUCESSO! 🎊🎊🎊"

    - name: ❌ Deploy Failed - Diagnóstico UrbanSend
      if: failure()
      run: |
        DEPLOY_END_TIME=$(date +%s)
        DEPLOY_DURATION=$((DEPLOY_END_TIME - DEPLOY_START_TIME))
        DURATION_FORMATTED=$(printf '%02d:%02d:%02d' $((DEPLOY_DURATION/3600)) $((DEPLOY_DURATION%3600/60)) $((DEPLOY_DURATION%60)))
        
        echo "❌ URBANSEND DEPLOY FALHOU!"
        echo "=========================="
        echo "⏱️  Tempo até falha: $DURATION_FORMATTED"
        echo "📊 Status: FAILED ❌"
        echo ""
        echo "🔍 Coletando informações de diagnóstico UrbanSend..."
        
        # Coletar logs detalhados do UrbanSend
        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
        echo '📋 Containers UrbanSend em execução:'
        docker ps -a --filter 'name=urbansend'
        echo ''
        echo '📝 Logs completos UrbanSend:'
        cd ${{ env.APP_DIR }} 2>/dev/null && docker-compose -f docker-compose.production.yml logs --tail=100 || echo 'Não foi possível acessar logs do UrbanSend'
        echo ''
        echo '🔍 Portas UrbanSend:'
        netstat -tlnp | grep -E ':(${{ env.APP_PORT }}|${{ env.SMTP_PORT }}|${{ env.REDIS_PORT }})' || echo 'Nenhuma porta UrbanSend ativa'
        echo ''
        echo '💾 Uso de disco:'
        df -h
        echo ''
        echo '🧠 Uso de memória:'
        free -h
        " 2>/dev/null || echo "Não foi possível conectar à VPS para diagnóstico"
        
        echo ""
        echo "💥💥💥 URBANSEND DEPLOY FALHOU - VERIFIQUE OS LOGS ACIMA 💥💥💥"
        
        exit 1