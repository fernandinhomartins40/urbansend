# 🚀 Direct VPS Deploy - UltraZend (Node.js direto, sem Docker/Nginx)
# Direct deployment to VPS with PM2 + Native SSL

name: 🚀 Deploy UltraZend Simple

on:
  push:
    branches: [main]
    paths-ignore: ['*.md', 'docs/**']
  workflow_dispatch:

env:
  VPS_HOST: 31.97.162.155
  VPS_USER: root
  DEPLOY_PATH: /var/www/ultrazend
  APP_DOMAIN: ultrazend.com.br

jobs:
  deploy:
    name: 🚀 Deploy Simplificado
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      # ==================== PREPARAÇÃO ====================
      - name: 📥 1️⃣ Checkout & Setup
        uses: actions/checkout@v4
        
      - name: 🔧 2️⃣ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: 📦 3️⃣ Build Application
        run: |
          echo "📦 Instalando dependências do backend..."
          cd backend && npm ci
          
          echo "🏗️ Construindo backend..."
          npm run build
          
          echo "✅ Verificando build do backend..."
          if [ ! -f "dist/index.js" ]; then
            echo "❌ ERRO: Build do backend falhou - dist/index.js não encontrado"
            exit 1
          fi
          echo "✅ Backend build OK: $(ls -la dist/index.js)"
          
          echo "📦 Instalando dependências do frontend..."
          cd ../frontend && npm ci
          
          echo "🏗️ Construindo frontend..."
          npm run build
          
          echo "✅ Verificando build do frontend..."
          if [ ! -d "dist" ]; then
            echo "❌ ERRO: Diretório dist/ não foi criado"
            exit 1
          fi
          
          if [ ! -f "dist/index.html" ]; then
            echo "❌ ERRO: index.html não foi gerado"
            exit 1
          fi
          
          if [ ! -d "dist/assets" ]; then
            echo "❌ ERRO: Diretório assets/ não foi criado"
            exit 1
          fi
          
          echo "✅ Frontend build OK:"
          echo "   - index.html: $(ls -la dist/index.html | awk '{print $5}') bytes"
          echo "   - Assets: $(ls -1 dist/assets/ | wc -l) arquivos"
          echo "   - Verificando main.tsx compilado..."
          grep -q "ReactDOM.createRoot" dist/index.html && echo "   ✅ React app detectado no HTML" || echo "   ⚠️ React app não detectado"
          
          echo "📋 Conteúdo do index.html:"
          head -15 dist/index.html

      - name: 🔧 4️⃣ Install SSH Tools
        run: |
          echo "🔧 Instalando ferramentas SSH..."
          sudo apt-get update -qq
          sudo apt-get install -y sshpass rsync
          
          echo "🔐 Testando conexão SSH..."
          sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 \
            $VPS_USER@$VPS_HOST "echo '✅ SSH conectado com sucesso'"

      # ==================== PREPARAR VPS ====================
      - name: 🛠️ 5️⃣ Setup VPS Environment
        run: |
          echo "🛠️ Configurando ambiente da VPS..."
          
          sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST << 'SCRIPT'
          set -e
          
          # Instalar Node.js se necessário
          if ! command -v node >/dev/null 2>&1; then
            echo "📦 Instalando Node.js..."
            curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
            apt-get install -y nodejs
          else
            echo "✅ Node.js já instalado: $(node -v)"
          fi
          
          # Instalar PM2 globalmente
          if ! command -v pm2 >/dev/null 2>&1; then
            echo "📦 Instalando PM2..."
            npm install -g pm2
          else
            echo "✅ PM2 já instalado"
          fi
          
          # Criar estrutura de diretórios
          echo "📁 Criando estrutura de diretórios..."
          mkdir -p /var/www/ultrazend/{backend,data,logs}
          chown -R www-data:www-data /var/www/ultrazend/data
          chmod 755 /var/www/ultrazend
          
          echo "✅ VPS configurada"
          SCRIPT

      # ==================== UPLOAD FRONTEND BUILD ====================
      - name: 🚀 5️⃣ Upload Frontend Build
        run: |
          echo "📤 Enviando build do frontend para VPS..."
          
          # Upload frontend build
          sshpass -p "${{ secrets.VPS_PASSWORD }}" rsync -avz --delete \
            -e "ssh -o StrictHostKeyChecking=no" \
            frontend/dist/ $VPS_USER@$VPS_HOST:/var/www/ultrazend/frontend/
          
          echo "✅ Frontend build enviado com sucesso"

      # ==================== DEPLOY APLICAÇÃO ====================
      - name: 🚀 6️⃣ Deploy Application
        run: |
          echo "🚀 Fazendo deploy da aplicação..."
          
          sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST << 'DEPLOY'
          set -e
          
          # Navegar para diretório da aplicação
          cd /var/www/ultrazend
          
          # Parar aplicação existente
          echo "🛑 Parando aplicação existente..."
          pm2 stop ultrazend 2>/dev/null || echo "Nenhuma aplicação rodando"
          pm2 delete ultrazend 2>/dev/null || echo "Processo não existia"
          
          # Garantir repositório Git atualizado (preservando frontend build)
          echo "🔧 Configurando repositório Git..."
          if [ ! -d ".git" ]; then
            echo "📥 Clonando repositório (primeira vez)..."
            cd /var/www
            # Backup do frontend se existir
            if [ -d "ultrazend/frontend" ]; then
              mv ultrazend/frontend /tmp/frontend-backup
            fi
            rm -rf ultrazend
            git clone https://github.com/fernandinhomartins40/urbansend.git ultrazend
            cd ultrazend
            # Restaurar frontend build se havia backup
            if [ -d "/tmp/frontend-backup" ]; then
              rm -rf frontend
              mv /tmp/frontend-backup frontend
            fi
          else
            echo "📦 Atualizando código do repositório..."
            # Backup do frontend build antes do reset
            cp -r frontend /tmp/frontend-backup || echo "Frontend não existe ainda"
            git config --global --add safe.directory /var/www/ultrazend || true
            git fetch origin
            git reset --hard origin/main
            git clean -fd
            # Restaurar frontend build
            rm -rf frontend
            mv /tmp/frontend-backup frontend || echo "Backup não disponível"
          fi
          
          # Ir para backend e configurar
          echo "⚙️ Configurando backend..."
          cd backend
          
          # Instalar todas as dependências (incluindo dev para compilar)
          echo "📦 Instalando todas as dependências..."
          npm install
          
          # Compilar TypeScript
          echo "🔨 Compilando TypeScript..."
          npm run build
          
          # Reinstalar só dependências de produção
          echo "🧹 Limpando devDependencies..."
          npm ci --only=production
          
          # Verificar frontend enviado via rsync
          cd /var/www/ultrazend
          echo "🌐 Verificando frontend enviado..."
          
          # Verificar se arquivos do frontend foram recebidos corretamente
          if [ -f "frontend/index.html" ]; then
            echo "✅ Frontend React encontrado:"
            ls -la frontend/index.html
            head -5 frontend/index.html
          else
            echo "❌ Frontend não foi enviado corretamente"
            mkdir -p frontend
            echo '{"error": "Frontend build não encontrado"}' > frontend/error.json
          fi
          
          # Configurar permissões do banco
          echo "🔧 Configurando permissões..."
          mkdir -p /var/www/ultrazend/data
          touch /var/www/ultrazend/data/database.sqlite
          chown -R www-data:www-data /var/www/ultrazend/data/ || true
          chmod 664 /var/www/ultrazend/data/database.sqlite || true
          
          # Voltar para root da aplicação
          cd /var/www/ultrazend
          
          # Iniciar aplicação com PM2
          echo "▶️ Iniciando aplicação com PM2..."
          pm2 start ecosystem.config.js --env production
          
          # Salvar configuração PM2
          pm2 save
          pm2 startup | tail -1 | bash || echo "PM2 startup já configurado"
          
          # Aguardar inicialização
          echo "⏳ Aguardando inicialização (15s)..."
          sleep 15
          
          # Verificar status
          echo "🔍 Verificando status da aplicação..."
          pm2 status
          
          # Verificar se aplicação está online (com retry e validação)
          echo "🔍 Verificando status da aplicação (com retry e validação)..."
          for i in {1..8}; do
            if pm2 list | grep -q "online"; then
              echo "✅ Aplicação PM2 online (tentativa $i)"
              
              # Aguardar inicialização completa
              sleep 2
              
              # Teste de conectividade detalhado
              echo "🔍 Testando conectividade..."
              if curl -f -s -m 10 http://localhost:3001/health > /dev/null; then
                echo "✅ Health check passou"
                
                # Verificar se frontend está sendo servido corretamente
                echo "🌐 Verificando frontend..."
                if curl -s -m 10 http://localhost:80 | grep -q "UltraZend"; then
                  echo "✅ Frontend carregando corretamente"
                elif curl -s -m 10 https://localhost:443 | grep -q "UltraZend" 2>/dev/null; then
                  echo "✅ Frontend HTTPS carregando corretamente"  
                else
                  echo "⚠️ Frontend pode não estar carregando corretamente"
                fi
                
                # Verificar arquivos críticos do frontend
                if [ -f "/var/www/ultrazend/frontend/index.html" ] && [ -d "/var/www/ultrazend/frontend/assets" ]; then
                  echo "✅ Arquivos do frontend presentes"
                else
                  echo "❌ Arquivos do frontend ausentes!"
                  ls -la /var/www/ultrazend/frontend/
                fi
                
                echo "✅ Deploy validado com sucesso!"
                break
              else
                echo "⚠️ Health check falhou na tentativa $i"
              fi
            else
              echo "⏳ Aguardando aplicação ficar online (tentativa $i/8)..."
            fi
            
            if [ $i -eq 8 ]; then
              echo "❌ FALHA CRÍTICA: Aplicação não ficou online após 8 tentativas"
              echo ""
              echo "📋 DIAGNÓSTICO COMPLETO:"
              echo "--- PM2 Status ---"
              pm2 status
              echo "--- PM2 Logs ---"
              pm2 logs ultrazend --lines 30 --nostream || echo "Sem logs PM2 disponíveis"
              echo "--- Portas ---"
              netstat -tlnp | grep -E ':(80|443|3001)' || echo "Nenhuma porta escutando"
              echo "--- Processos Node.js ---"
              ps aux | grep node | head -5 || echo "Nenhum processo Node.js"
              echo "--- Estrutura de Arquivos ---"
              ls -la /var/www/ultrazend/ || echo "Diretório não existe"
              ls -la /var/www/ultrazend/frontend/ || echo "Frontend não existe"
              echo "--- Logs do Sistema ---"
              tail -n 15 /var/log/syslog | grep -i error || echo "Sem erros no syslog"
              exit 1
            fi
            sleep 4
          done
          
          echo "🎉 Deploy concluído com sucesso!"
          DEPLOY

      # ==================== RESUMO FINAL ====================
      - name: 📊 7️⃣ Summary
        run: |
          echo ""
          echo "🎉 ===== DEPLOY CONCLUÍDO COM SUCESSO ====="
          echo ""
          echo "📋 INFORMAÇÕES DO DEPLOY:"
          echo "  🌐 Domínio: $APP_DOMAIN"
          echo "  🔌 IP VPS: $VPS_HOST"
          echo "  🚪 HTTPS: Porta 443 (SSL nativo)"
          echo "  🌐 HTTP: Porta 80 (redirect para HTTPS)"
          echo "  📧 SMTP: Porta 25"
          echo "  ⏰ Deploy: $(date '+%d/%m/%Y %H:%M:%S')"
          echo ""
          echo "🔗 URLS DISPONÍVEIS:"
          echo "  🌐 App: https://$APP_DOMAIN"
          echo "  📱 API: https://$APP_DOMAIN/api/"
          echo ""
          echo "🎯 ARQUITETURA SIMPLIFICADA:"
          echo "  ✅ Node.js direto com SSL nativo"
          echo "  ✅ PM2 process management (fork mode)"
          echo "  ✅ Sem Docker containers"
          echo "  ✅ Sem Nginx reverse proxy"
          echo "  ✅ Certificados Let's Encrypt diretos"
          echo ""
          echo "✅ Aplicação UltraZend está online!"