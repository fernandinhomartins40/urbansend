name: 🚀 Deploy UltraZend Production (PM2 + Nginx)

concurrency:
  group: ultrazend-production-deploy
  cancel-in-progress: true

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force complete rebuild'
        required: false
        default: false
        type: boolean

env:
  VPS_HOST: '31.97.162.155'
  VPS_USER: 'root'
  APP_DIR: '/var/www/ultrazend'
  APP_PORT: '3001'
  DOMAIN: 'www.ultrazend.com.br'
  NODE_VERSION: '20'

jobs:
  deploy:
    name: 🎯 Deploy Production (PM2 + Nginx)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: 📋 Deploy Info
      run: |
        echo "🚀 ULTRAZEND NATIVE DEPLOY"
        echo "========================="
        echo "📦 Commit: ${{ github.sha }}"
        echo "🌿 Branch: ${{ github.ref_name }}"  
        echo "🎯 Target: ${{ env.VPS_HOST }}:${{ env.APP_PORT }}"
        echo "🌐 Domain: ${{ env.DOMAIN }}"
        echo "⏰ Start: $(date -u)"
        echo "========================="

    - name: 🔧 Setup SSH
      run: |
        sudo apt-get update -qq && sudo apt-get install -y sshpass rsync
        mkdir -p ~/.ssh && chmod 700 ~/.ssh
        ssh-keyscan -H ${{ env.VPS_HOST }} >> ~/.ssh/known_hosts
        
        # Test SSH connection
        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "echo '✅ SSH OK'"

    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          frontend/package-lock.json
          backend/package-lock.json

    - name: 🏗️ Build Frontend
      env:
        VITE_API_BASE_URL: https://${{ env.DOMAIN }}/api
        VITE_WS_URL: wss://${{ env.DOMAIN }}
        VITE_APP_NAME: UltraZend SMTP
        VITE_APP_VERSION: 2.0.0
        VITE_ENABLE_PWA: true
        VITE_ENABLE_NOTIFICATIONS: true
        VITE_ENABLE_DARK_MODE: true
        VITE_ENABLE_CSP: true
        VITE_SECURE_COOKIES: true
      run: |
        echo "🏗️ Building React frontend with production config..."
        cd frontend
        npm ci --silent
        echo "📋 Environment variables:"
        echo "  VITE_API_BASE_URL=$VITE_API_BASE_URL"
        echo "  VITE_WS_URL=$VITE_WS_URL"
        npm run build
        echo "✅ Frontend built - Size: $(du -sh dist/)"
        ls -la dist/ | head -5

    - name: 🚀 Deploy to VPS
      run: |
        echo "🚀 Deploying to VPS..."
        
        # Transfer code
        echo "📤 Transferring files..."
        sshpass -p "${{ secrets.VPS_PASSWORD }}" rsync -avz --delete \
          --exclude='.git/' --exclude='node_modules/' --exclude='.claude/' \
          --exclude='frontend/node_modules/' --exclude='backend/node_modules/' \
          --exclude='backend/dist/' --exclude='__tests__/' --exclude='coverage/' \
          --include='configs/' --include='configs/**' \
          -e "ssh -o StrictHostKeyChecking=no" \
          ./ ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:${{ env.APP_DIR }}/
        
        # Deploy on server
        echo "⚙️ Configuring server..."
        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
        cd ${{ env.APP_DIR }}
        
        # Stop existing services - ROBUST CLEANUP
        echo '🛑 Stopping all existing services...'
        pm2 stop all 2>/dev/null || true
        pm2 delete all 2>/dev/null || true
        pm2 kill 2>/dev/null || true
        echo '✅ All PM2 processes cleaned up'
        
        # Setup backend
        echo '🏗️ Setting up backend...'
        cd backend
        
        # COMPREHENSIVE CLEANUP - Remove old files and caches
        echo '🗑️ COMPREHENSIVE CLEANUP - Removing old versions...'
        rm -rf dist/ || true
        rm -rf node_modules/.cache/ || true
        rm -rf .npm/ || true
        rm -rf ~/.npm/_cacache/ || true
        
        # Clean old log files (keep last 7 days)
        find /var/www/ultrazend/logs/ -name "*.log" -mtime +7 -delete 2>/dev/null || true
        
        # Clean old PM2 logs
        pm2 flush 2>/dev/null || true
        
        echo '✅ Cleanup completed - only fresh version will remain'
        
        # Install Redis if not present
        echo '🔧 Ensuring Redis is available...'
        if ! command -v redis-server &> /dev/null; then
          echo 'Installing Redis...'
          apt-get update -qq && apt-get install -y redis-server
          systemctl enable redis-server
          systemctl start redis-server
        fi
        
        # 🚀 ULTRAZEND SMTP PURE MODE - NO POSTFIX DEPENDENCIES
        echo '🚀 Setting up UltraZend SMTP Server (Pure Mode - No Postfix)'
        echo '🎯 UltraZend will handle all SMTP delivery directly via MX records'
        
        # Ensure Postfix is DISABLED and REMOVED (if installed)
        echo '🛑 Ensuring Postfix is completely disabled...'
        if command -v postfix &> /dev/null; then
          echo '🛑 Stopping and disabling Postfix...'
          systemctl stop postfix 2>/dev/null || true
          systemctl disable postfix 2>/dev/null || true
          
          # Optional: Remove Postfix entirely (uncomment if desired)
          # apt-get remove --purge -y postfix mailutils 2>/dev/null || true
          
          echo '✅ Postfix disabled - UltraZend SMTP will handle all email delivery'
        else
          echo '✅ No Postfix found - Perfect for UltraZend pure mode'
        fi
        
        # Ensure OpenDKIM is also disabled (UltraZend has built-in DKIM)
        echo '🔐 Ensuring OpenDKIM is disabled (UltraZend uses built-in DKIM)...'
        if systemctl is-active --quiet opendkim 2>/dev/null; then
          echo '🛑 Stopping OpenDKIM (conflicts with UltraZend DKIM)...'
          systemctl stop opendkim 2>/dev/null || true
          systemctl disable opendkim 2>/dev/null || true
        fi
        
        # Verify MTA is not conflicting
        echo '🔍 Verifying no MTA conflicts with UltraZend SMTP...'
        netstat -tlnp | grep ':25 ' || echo '✅ Port 25 available for UltraZend SMTP'
        
        # Confirm UltraZend SMTP Pure Mode
        echo '🎉 UltraZend SMTP Pure Mode Configuration:'
        echo '   ✅ No Postfix dependency'
        echo '   ✅ Direct MX record delivery'  
        echo '   ✅ Built-in Node.js DKIM signing'
        echo '   ✅ Native email queue processing'
        echo '   ✅ 100% TypeScript/Node.js implementation'
        
        cd ${{ env.APP_DIR }}/backend
        
        # Install all dependencies (including swagger) with error checking
        echo '📦 Installing dependencies...'
        npm ci --silent || { echo '❌ npm ci failed'; exit 1; }
        npm install swagger-jsdoc swagger-ui-express --save --silent || { echo '❌ swagger install failed'; exit 1; }
        echo '✅ Dependencies installed successfully'
        
        # Build the application with validation
        echo '🔨 Building application...'
        npm run build || { echo '❌ Build failed - stopping deployment'; exit 1; }
        
        # Validate build output exists with detailed debugging
        echo '🔍 Validating build output...'
        if [ ! -d "dist" ]; then
          echo '❌ dist directory not found - stopping deployment'
          echo 'Current directory contents:'
          ls -la
          exit 1
        fi
        
        js_files=$(find dist -name "*.js" 2>/dev/null | wc -l)
        if [ "$js_files" -eq 0 ]; then
          echo '❌ No JavaScript files found in dist/ - stopping deployment'
          echo 'Dist directory contents:'
          ls -la dist/ || echo 'dist/ is empty or inaccessible'
          exit 1
        fi
        
        echo "✅ Build completed successfully - $js_files JS files generated"
        echo 'Build output summary:'
        ls -la dist/ | head -10
        
        # Copy and configure UltraZend SMTP Pure environment
        if [ -f ../configs/.env.ultrazend.production ]; then
          cp ../configs/.env.ultrazend.production .env
          chmod 600 .env
          echo '✅ UltraZend Pure SMTP .env configured'
        else
          echo '⚙️ Creating UltraZend SMTP Pure production .env...'
          echo 'NODE_ENV=production' > .env
          echo 'PORT=3001' >> .env
          echo 'HOST=0.0.0.0' >> .env
          echo 'DATABASE_URL=/var/www/ultrazend/backend/ultrazend.sqlite' >> .env
          echo 'REDIS_URL=redis://127.0.0.1:6379' >> .env
          echo 'LOG_FILE_PATH=/var/www/ultrazend/logs' >> .env
          echo 'LOG_LEVEL=info' >> .env
          echo 'ULTRAZEND_HOSTNAME=mail.ultrazend.com.br' >> .env
          echo 'ULTRAZEND_DOMAIN=ultrazend.com.br' >> .env
          echo 'ULTRAZEND_SMTP_PORT=25' >> .env
          echo 'SMTP_MODE=pure_ultrazend' >> .env
          echo 'POSTFIX_ENABLED=false' >> .env
          echo 'DELIVERY_MODE=direct_mx' >> .env
          echo 'DKIM_ENABLED=true' >> .env
          echo 'DKIM_PRIVATE_KEY_PATH=../configs/dkim-keys/ultrazend.com.br-default-private.pem' >> .env
          echo 'DKIM_SELECTOR=default' >> .env
          echo 'DKIM_DOMAIN=ultrazend.com.br' >> .env
          echo 'EMAIL_QUEUE_CONCURRENCY=5' >> .env
          echo 'EMAIL_QUEUE_RETRY_ATTEMPTS=3' >> .env
          echo 'EMAIL_QUEUE_RETRY_DELAY=300000' >> .env
          echo 'QUEUE_CLEANUP_ENABLED=true' >> .env
          echo 'QUEUE_RETENTION_HOURS=48' >> .env
          echo 'MAX_CONCURRENT_CONNECTIONS=10' >> .env
          echo 'MAX_EMAILS_PER_HOUR=1000' >> .env
          echo 'RATE_LIMIT_ENABLED=true' >> .env
          echo 'CONNECTION_TIMEOUT=60000' >> .env
          chmod 600 .env
        fi
        
        # Verify DKIM static keys exist
        echo '🔐 Verifying DKIM static keys...'
        if [ -f \"../configs/dkim-keys/ultrazend.com.br-default-private.pem\" ]; then
          echo '✅ DKIM private key found'
          ls -la ../configs/dkim-keys/ultrazend.com.br-default-*
        else
          echo '❌ DKIM static keys not found! Deploy may fail.'
          echo 'Expected location: /var/www/ultrazend/configs/dkim-keys/'
          ls -la ../configs/dkim-keys/ || echo 'Directory not found'
        fi
        
        # UltraZend SMTP Pure configuration
        echo '🎉 UltraZend SMTP Pure Mode configured:'
        echo '   ✅ Direct MX delivery enabled'
        echo '   ✅ Node.js DKIM signing active'
        echo '   ✅ Queue processing enabled'
        echo '   ✅ No external SMTP dependencies'
        echo '   ✅ DKIM keys loaded from configs/dkim-keys/'
        echo '✅ UltraZend SMTP architecture validated'
        
        # Ensure log directories exist
        mkdir -p /var/www/ultrazend/logs/{application,errors,security,performance,business}
        chown -R www-data:www-data /var/www/ultrazend/logs || true
        
        # Run migrations with better error handling
        echo 'Running database migrations...'
        npm run migrate:latest || echo 'Migration completed with warnings - continuing...'
        
        cd ..
        
        # Setup frontend in nginx
        echo '🌐 Setting up frontend...'
        echo '🗑️ Removing old frontend files...'
        rm -rf /var/www/ultrazend-static
        mkdir -p /var/www/ultrazend-static
        echo '📁 Copying new frontend build...'
        cp -r frontend/dist/* /var/www/ultrazend-static/
        chown -R www-data:www-data /var/www/ultrazend-static
        echo '✅ Frontend deployed - Size: $(du -sh /var/www/ultrazend-static/)'
        
        # Configure nginx with SSL automatically
        echo '🔒 Configuring Nginx with SSL...'
        if [ -f scripts/setup-nginx-ssl.sh ]; then
          chmod +x scripts/setup-nginx-ssl.sh
          ./scripts/setup-nginx-ssl.sh
        else
          echo '⚠️ SSL setup script not found, using manual configuration...'
          # Fallback: usar configuração SSL se existir certificado
          if [ -f /etc/letsencrypt/live/www.ultrazend.com.br/fullchain.pem ]; then
            echo 'Using SSL configuration'
            cp configs/nginx-ssl.conf /etc/nginx/sites-available/ultrazend
          else
            echo 'Using HTTP configuration and obtaining SSL certificate'
            cp configs/nginx-http.conf /etc/nginx/sites-available/ultrazend
            sed -i 's|/var/www/ultrazend/frontend/dist|/var/www/ultrazend-static|g' /etc/nginx/sites-available/ultrazend
          fi
          
          ln -sf /etc/nginx/sites-available/ultrazend /etc/nginx/sites-enabled/
          rm -f /etc/nginx/sites-enabled/default
          nginx -t && systemctl reload nginx
          
          # Tentar obter SSL se não existir
          if [ ! -f /etc/letsencrypt/live/www.ultrazend.com.br/fullchain.pem ]; then
            echo 'Obtaining SSL certificate...'
            certbot --nginx -d www.ultrazend.com.br --non-interactive --agree-tos --email admin@ultrazend.com.br || echo 'SSL setup completed with warnings'
            systemctl reload nginx
          fi
        fi
        
        # Start backend with PM2 using ecosystem config - ROBUST STARTUP
        echo '🚀 Starting all services with PM2...'
        
        # Start services with error checking
        pm2 start ecosystem.config.js --env production || { echo '❌ PM2 startup failed'; exit 1; }
        pm2 save || { echo '❌ PM2 save failed'; exit 1; }
        
        # Wait for services to start
        echo '⏳ Waiting for services to initialize...'
        sleep 10
        
        # Validate all expected processes are running
        echo '🔍 Validating service startup...'
        expected_processes=("ultrazend-api" "ultrazend-email-worker" "ultrazend-queue-processor")
        
        for process in "\${expected_processes[@]}"; do
          if pm2 show "\$process" >/dev/null 2>&1; then
            echo "✅ \$process is running"
          else
            echo "❌ \$process failed to start"
            pm2 logs "\$process" --lines 20 || true
            exit 1
          fi
        done
        
        # Save PM2 configuration
        pm2 startup || true
        pm2 save || true
        
        echo '✅ ROBUST DEPLOY COMPLETED!'
        echo ''
        echo 'Services Status:'
        pm2 status
        echo ''
        echo 'Nginx Status:'
        systemctl is-active nginx && echo '✅ Nginx: Active' || echo '❌ Nginx: Inactive'
        "

    - name: 🏥 Comprehensive Health Check
      run: |
        echo "🏥 RIGOROUS HEALTH CHECK - Testing deployed application..."
        sleep 20
        
        # Test backend health with status validation
        echo "🔍 Testing backend health endpoint..."
        backend_healthy=false
        
        for i in 1 2 3 4 5; do
          echo "🔄 Health check attempt $i/5..."
          
          # Get health response and validate
          health_response=$(curl -s --connect-timeout 10 "http://${{ env.VPS_HOST }}:${{ env.APP_PORT }}/health" || echo "CURL_FAILED")
          
          if [[ "$health_response" == "CURL_FAILED" ]]; then
            echo "❌ Backend connection failed on attempt $i"
          elif echo "$health_response" | grep -q '"status":"healthy"'; then
            echo "✅ Backend is HEALTHY!"
            echo "📊 Health Response: $health_response"
            backend_healthy=true
            break
          elif echo "$health_response" | grep -q '"status":"unhealthy"'; then
            echo "⚠️ Backend responding but UNHEALTHY on attempt $i"
            echo "📊 Unhealthy Response: $health_response"
          else
            echo "⚠️ Unexpected health response on attempt $i: $health_response"
          fi
          
          if [ $i -lt 5 ]; then
            echo "⏳ Waiting 10 seconds before retry..."
            sleep 10
          fi
        done
        
        # Fail deployment if backend is not healthy
        if [ "$backend_healthy" = false ]; then
          echo "❌ DEPLOYMENT FAILED: Backend health check failed after 5 attempts"
          echo "🔍 Checking PM2 status for debugging:"
          sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "pm2 status && pm2 logs --lines 30"
          exit 1
        fi
        
        # Test frontend via HTTPS (with fallback to HTTP)
        echo "🌐 Testing frontend access..."
        if curl -f --connect-timeout 10 "https://${{ env.DOMAIN }}/"; then
          echo "✅ HTTPS Frontend working!"
        elif curl -f --connect-timeout 10 "http://${{ env.VPS_HOST }}/"; then
          echo "✅ HTTP Frontend working!"
        else
          echo "⚠️ Frontend may not be ready"
        fi
        
        # Test API via HTTPS (with fallback to HTTP)
        echo "🔌 Testing API access..."
        if curl -f --connect-timeout 10 "https://${{ env.DOMAIN }}/api/health"; then
          echo "✅ HTTPS API working!"
        elif curl -f --connect-timeout 10 "http://${{ env.VPS_HOST }}/api/health"; then
          echo "✅ HTTP API working!"
        else
          echo "⚠️ API may not be ready"
        fi

    - name: ✅ Deploy Complete
      run: |
        echo "🎉 ULTRAZEND DEPLOY COMPLETE!"
        echo "============================"
        echo "🔒 Website: https://${{ env.DOMAIN }}"
        echo "🏥 Health: https://${{ env.DOMAIN }}/api/health"
        echo "🔌 API: https://${{ env.DOMAIN }}/api"
        echo "📚 Docs: https://${{ env.DOMAIN }}/api-docs"
        echo ""
        echo "✨ Deployed with PM2 + Nginx + SSL (Auto-configured!)"
        echo "⏰ Deploy completed at: $(date -u)"
