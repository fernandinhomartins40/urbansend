name: 🚀 UltraZend Production Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes'
        required: false
        default: 'false'
        type: boolean

env:
  NODE_VERSION: '20.x'
  DEPLOY_HOST: '31.97.162.155'
  DEPLOY_USER: 'root'

jobs:
  test:
    name: 🧪 Test & Validate
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json
    
    - name: 🔧 Install Backend Dependencies
      run: |
        cd backend
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
        fi
    
    - name: 🔧 Install Frontend Dependencies
      run: |
        cd frontend
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
        fi
    
    - name: 🔍 Backend Type Check
      run: |
        cd backend
        npm run typecheck
    
    - name: 🔍 Frontend Type Check
      run: |
        cd frontend
        npm run typecheck
    
    - name: 🧪 Run Backend Tests
      run: |
        cd backend
        npm test || echo "⚠️ Tests not configured or failed"
      continue-on-error: true
    
    - name: 🧪 Run Frontend Tests
      run: |
        cd frontend
        npm test || echo "⚠️ Tests not configured or failed"
      continue-on-error: true

  build:
    name: 🔨 Build Application
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json
    
    - name: 🔧 Install Backend Dependencies
      run: |
        cd backend
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
        fi
    
    - name: 🔧 Install Frontend Dependencies  
      run: |
        cd frontend
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
        fi
    
    - name: 🏗️ Build Backend
      run: |
        cd backend
        npm run build
        
    - name: 🏗️ Build Frontend
      run: |
        cd frontend
        npm run build
    
    - name: ✅ Verify Builds
      run: |
        echo "🔍 Verifying builds..."
        [ -f "backend/dist/index.js" ] || { echo "❌ Backend build failed"; exit 1; }
        [ -f "frontend/dist/index.html" ] || { echo "❌ Frontend build failed"; exit 1; }
        echo "✅ All builds successful"
    
    - name: 📤 Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ultrazend-builds
        path: |
          backend/dist/
          frontend/dist/
        retention-days: 1

  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build]
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json
    
    - name: 📥 Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: ultrazend-builds
        path: ./
    
    - name: 🔧 Restore Backend Dependencies
      run: |
        cd backend
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
        fi
    
    - name: 🔧 Restore Frontend Dependencies
      run: |
        cd frontend
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
        fi
    
    - name: 🔑 Setup SSH Key
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
    
    - name: 🚀 Deploy to Production Server
      run: |
        chmod +x deploy-github-actions.sh
        ./deploy-github-actions.sh
      env:
        DEPLOY_HOST: ${{ env.DEPLOY_HOST }}
        DEPLOY_USER: ${{ env.DEPLOY_USER }}
    
    - name: 🔍 Post-Deploy Health Check
      run: |
        echo "🔍 Final health check..."
        max_attempts=5
        attempt=1
        
        while [ $attempt -le $max_attempts ]; do
          echo "Health check attempt $attempt/$max_attempts"
          
          if curl -f -s -m 10 "https://www.ultrazend.com.br/health" > /dev/null 2>&1; then
            echo "✅ External health check passed"
            exit 0
          elif curl -f -s -m 10 "http://www.ultrazend.com.br" > /dev/null 2>&1; then
            echo "⚠️ HTTP accessible, HTTPS may be setting up"
            exit 0
          fi
          
          echo "Attempt $attempt failed, waiting 30s..."
          sleep 30
          attempt=$((attempt + 1))
        done
        
        echo "⚠️ External access not available yet (may need DNS propagation)"
        exit 0

  notify:
    name: 📢 Notify Status
    runs-on: ubuntu-latest
    needs: [test, build, deploy]
    if: always()
    
    steps:
    - name: 📊 Deployment Summary
      run: |
        echo "📊 ===== ULTRAZEND DEPLOYMENT SUMMARY ====="
        echo "🚀 Pipeline: UltraZend GitHub Actions"
        echo "📅 Date: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
        echo "🌿 Branch: ${{ github.ref_name }}"
        echo "🔢 Run: #${{ github.run_number }}"
        echo "🔖 Commit: ${{ github.sha }}"
        echo "👤 Triggered by: ${{ github.actor }}"
        
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "✅ Status: SUCCESS"
          echo "🌐 Website: https://www.ultrazend.com.br"
          echo "🔍 Health: https://www.ultrazend.com.br/health"
          echo "🔌 API: https://www.ultrazend.com.br/api"
        else
          echo "❌ Status: FAILED"
          echo "💥 Check the logs above for details"
        fi
        
        echo "📋 Pipeline Results:"
        echo "  🧪 Tests: ${{ needs.test.result }}"
        echo "  🔨 Build: ${{ needs.build.result }}"  
        echo "  🚀 Deploy: ${{ needs.deploy.result }}"
        echo "🔗 Build URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        echo "================================================="