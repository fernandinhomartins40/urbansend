name: 🚀 Deploy UltraZend Production System

concurrency:
  group: ultrazend-production-deploy
  cancel-in-progress: true

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  VPS_HOST: '31.97.162.155'
  VPS_USER: 'root'
  APP_DIR: '/var/www/ultrazend'
  APP_PORT: '3001'
  DOMAIN: 'www.ultrazend.com.br'
  NODE_VERSION: '20'

jobs:
  deploy:
    name: 🎯 Deploy UltraZend System
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: 📋 Informações do Deploy
      run: |
        echo "=============================================="
        echo "🚀 INICIANDO DEPLOY ULTRAZEND SYSTEM"
        echo "=============================================="
        echo "📦 Commit: ${{ github.sha }}"
        echo "🌿 Branch: ${{ github.ref_name }}"
        echo "👤 Actor: ${{ github.actor }}"
        echo "⏰ Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
        echo "🎯 Target: ${{ env.VPS_HOST }}:${{ env.APP_PORT }}"
        echo "🌐 Domain: ${{ env.DOMAIN }}"
        echo "=============================================="
        
        # Variável para tracking do tempo
        echo "DEPLOY_START_TIME=$(date +%s)" >> $GITHUB_ENV

    - name: 🔧 Configurar SSH e Ferramentas
      run: |
        echo "🔧 Configurando SSH e ferramentas necessárias..."
        sudo apt-get update -qq
        sudo apt-get install -y sshpass rsync curl jq
        
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        ssh-keyscan -H ${{ env.VPS_HOST }} >> ~/.ssh/known_hosts 2>/dev/null
        
        echo "🔐 Testando conexão SSH..."
        if sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "echo '✅ SSH funcionando'"; then
          echo "✅ SSH configurado com sucesso"
        else
          echo "❌ Falha na conexão SSH"
          exit 1
        fi

    - name: 📥 Checkout do Código
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📊 Análise Pre-Deploy
      run: |
        echo "📊 Analisando estrutura do projeto..."
        echo "=================================="
        
        echo "📁 Estrutura raiz:"
        ls -la
        
        echo ""
        echo "📁 Backend:"
        if [ -d "backend" ]; then
          ls -la backend/
          if [ -f "backend/package.json" ]; then
            echo "✅ package.json encontrado"
            echo "📦 Dependências principais:"
            cat backend/package.json | jq -r '.dependencies | keys | .[]' | head -5
          fi
        else
          echo "❌ Diretório backend não encontrado"
        fi
        
        echo ""
        echo "📁 Frontend:"
        if [ -d "frontend" ]; then
          ls -la frontend/
          if [ -f "frontend/package.json" ]; then
            echo "✅ package.json encontrado"
            echo "📦 Dependências principais:"
            cat frontend/package.json | jq -r '.dependencies | keys | .[]' | head -5
          fi
        else
          echo "❌ Diretório frontend não encontrado"
        fi
        
        echo ""
        echo "🔧 Configurações:"
        ls -la configs/ ecosystem.config.js 2>/dev/null || echo "⚠️ Arquivos de configuração não encontrados"

    - name: 🏗️ Build Local do Backend
      run: |
        echo "🏗️ Iniciando build local do backend..."
        echo "======================================"
        
        if [ ! -d "backend" ]; then
          echo "❌ Diretório backend não encontrado"
          exit 1
        fi
        
        cd backend
        
        echo "📦 Instalando dependências do backend..."
        if [ -f "package-lock.json" ]; then
          npm ci
        else
          npm install
        fi
        echo "✅ Dependências instaladas com sucesso"
        
        echo "🔨 Compilando TypeScript..."
        if npm run build; then
          echo "✅ Build do backend concluído com sucesso"
          echo "📊 Analisando build:"
          ls -la dist/
          echo "📈 Tamanho do build: $(du -sh dist/)"
          echo "📝 Arquivos gerados: $(find dist/ -type f | wc -l)"
          
          # Verificar arquivo principal
          if [ -f "dist/index.js" ]; then
            echo "✅ index.js encontrado"
          else
            echo "❌ index.js não encontrado"
            exit 1
          fi
        else
          echo "❌ Falha no build do backend"
          exit 1
        fi

    - name: ⚛️ Build Local do Frontend  
      run: |
        echo "⚛️ Iniciando build local do frontend..."
        echo "======================================"
        
        if [ ! -d "frontend" ]; then
          echo "❌ Diretório frontend não encontrado"
          exit 1
        fi
        
        cd frontend
        
        echo "📦 Instalando dependências do frontend..."
        if [ -f "package-lock.json" ]; then
          npm ci
        else
          npm install
        fi
        echo "✅ Dependências instaladas com sucesso"
        
        echo "🔨 Compilando React/Vite..."
        if npm run build; then
          echo "✅ Build do frontend concluído com sucesso"
          echo "📊 Analisando build:"
          ls -la dist/
          echo "📈 Tamanho do build: $(du -sh dist/)"
          echo "📝 Arquivos gerados: $(find dist/ -type f | wc -l)"
          
          # Verificar se arquivos essenciais foram gerados
          if [ -f "dist/index.html" ]; then
            echo "✅ index.html encontrado"
          else
            echo "❌ index.html não encontrado"
            exit 1
          fi
        else
          echo "❌ Falha no build do frontend"
          exit 1
        fi

    - name: 🧹 Preparar VPS
      run: |
        echo "🧹 Preparando ambiente na VPS..."
        echo "================================"
        
        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
        echo '🔄 Atualizando sistema...'
        apt-get update -y > /dev/null 2>&1
        
        echo '🟢 Instalando Node.js 20.x...'
        curl -fsSL https://deb.nodesource.com/setup_20.x | bash - > /dev/null 2>&1
        apt-get install -y nodejs > /dev/null 2>&1
        
        echo '📦 Instalando PM2...'
        npm install -g pm2 > /dev/null 2>&1
        
        echo '🌐 Instalando Nginx e utilitários...'
        apt-get install -y nginx certbot python3-certbot-nginx jq net-tools > /dev/null 2>&1
        
        echo '🔒 Configurando firewall...'
        ufw --force enable > /dev/null 2>&1
        ufw allow ssh > /dev/null 2>&1
        ufw allow http > /dev/null 2>&1
        ufw allow https > /dev/null 2>&1
        
        echo '✅ Versões instaladas:'
        node --version
        npm --version
        pm2 --version
        nginx -v
        "

    - name: 🧹 Backup e Limpeza
      run: |
        echo "🧹 Backup da versão atual e limpeza..."
        echo "======================================"
        
        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
        # Criar backup se aplicação existir
        if [ -d '${{ env.APP_DIR }}' ]; then
          echo '📦 Criando backup da versão atual...'
          backup_dir='/var/backups/ultrazend/backup-\$(date +%Y%m%d-%H%M%S)'
          mkdir -p \"\$backup_dir\"
          cp -r ${{ env.APP_DIR }}/backend \"\$backup_dir/\" 2>/dev/null || true
          cp -r ${{ env.APP_DIR }}/frontend \"\$backup_dir/\" 2>/dev/null || true
          echo '✅ Backup criado em \$backup_dir'
        else
          echo 'ℹ️  Primeira instalação - sem backup necessário'
        fi
        
        echo '🛑 Parando aplicação existente...'
        pm2 stop ultrazend 2>/dev/null && echo '✅ PM2 parado' || echo 'ℹ️  Nenhuma aplicação PM2 rodando'
        pm2 delete ultrazend 2>/dev/null && echo '✅ PM2 removido' || echo 'ℹ️  Nenhuma aplicação PM2 para remover'
        
        echo '📁 Preparando diretório...'
        mkdir -p ${{ env.APP_DIR }}/{backend,frontend,data,logs,uploads,temp}
        mkdir -p ${{ env.APP_DIR }}/data/{database,cache,sessions}
        mkdir -p /var/backups/ultrazend
        echo '✅ Diretórios preparados'
        "

    - name: 📤 Transferir Código para VPS
      run: |
        echo "📤 Transferindo código para VPS..."
        echo "=================================="
        
        echo "📊 Analisando arquivos a transferir..."
        echo "Tamanho total: $(du -sh . | cut -f1)"
        
        echo "🚀 Iniciando transferência..."
        if sshpass -p "${{ secrets.VPS_PASSWORD }}" rsync -avz --progress --delete \
          --exclude='.git/' \
          --exclude='node_modules/' \
          --exclude='frontend/node_modules/' \
          --exclude='backend/node_modules/' \
          --exclude='.claude/' \
          --exclude='__tests__/' \
          --exclude='coverage/' \
          -e "ssh -o StrictHostKeyChecking=no" \
          ./ ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:${{ env.APP_DIR }}/; then
          echo "✅ Código transferido com sucesso"
        else
          echo "❌ Falha na transferência"
          exit 1
        fi

    - name: 🔧 Configurar Aplicação no Servidor
      run: |
        echo "🔧 Configurando aplicação no servidor..."
        echo "========================================"
        
        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
        cd ${{ env.APP_DIR }}
        
        echo '📋 Verificando estrutura transferida...'
        ls -la
        echo ''
        echo '📁 Estrutura backend:'
        ls -la backend/
        echo ''
        echo '📁 Estrutura configs:'
        ls -la configs/ 2>/dev/null || echo 'Configs não encontrados'
        
        echo '🔧 Configurando backend...'
        cd backend
        
        # Instalar dependências de produção
        echo '📦 Instalando dependências de produção...'
        if [ -f 'package-lock.json' ]; then
          echo 'Usando npm ci...'
          npm ci --only=production
        else
          echo 'Usando npm install...'
          npm install --only=production
        fi
        
        # Verificar build detalhadamente
        echo '🔍 Verificando build...'
        if [ -d 'dist' ]; then
          echo '✅ Diretório dist existe'
          ls -la dist/
          if [ -f 'dist/index.js' ]; then
            echo '✅ index.js encontrado'
            echo 'Tamanho: \$(du -h dist/index.js)'
          else
            echo '❌ index.js não encontrado'
            echo 'Conteúdo de dist:'
            ls -la dist/
            exit 1
          fi
        else
          echo '❌ Diretório dist não existe'
          exit 1
        fi
        
        # Executar migrações com mais detalhes
        echo '🗄️  Executando migrações de banco...'
        if npm run migrate:latest; then
          echo '✅ Migrações executadas com sucesso'
        else
          echo '⚠️  Falha nas migrações - continuando'
        fi
        
        cd ..
        
        # Configurar Nginx com verificações detalhadas
        echo '🌐 Configurando Nginx...'
        if [ -f 'configs/nginx-ssl.conf' ]; then
          echo 'Copiando configuração Nginx...'
          cp configs/nginx-ssl.conf /etc/nginx/sites-available/ultrazend
          ln -sf /etc/nginx/sites-available/ultrazend /etc/nginx/sites-enabled/
          rm -f /etc/nginx/sites-enabled/default
          
          echo 'Testando configuração Nginx...'
          if nginx -t; then
            echo '✅ Configuração Nginx válida'
          else
            echo '❌ Erro na configuração Nginx'
            echo 'Logs do Nginx:'
            tail -20 /var/log/nginx/error.log 2>/dev/null || echo 'Sem logs de erro'
            exit 1
          fi
        else
          echo '❌ Arquivo nginx-ssl.conf não encontrado'
          exit 1
        fi
        
        # Configurar SSL com mais detalhes
        if [ ! -f '/etc/letsencrypt/live/${{ env.DOMAIN }}/fullchain.pem' ]; then
          echo '🔒 Configurando certificados SSL...'
          systemctl stop nginx 2>/dev/null || true
          
          echo 'Executando certbot...'
          if certbot certonly --standalone \
            -d ultrazend.com.br \
            -d ${{ env.DOMAIN }} \
            --non-interactive \
            --agree-tos \
            --email admin@ultrazend.com.br; then
            echo '✅ SSL configurado com sucesso'
          else
            echo '⚠️  SSL falhou - continuando sem HTTPS'
          fi
        else
          echo '✅ Certificados SSL já existem'
        fi
        
        # Definir permissões com verificação
        echo '🔐 Configurando permissões...'
        chown -R www-data:www-data ${{ env.APP_DIR }}
        chmod +x ${{ env.APP_DIR }}/backend/dist/index.js
        
        # Verificar se ecosystem.config.js existe
        if [ -f 'ecosystem.config.js' ]; then
          echo '✅ ecosystem.config.js encontrado'
          cat ecosystem.config.js | head -10
        else
          echo '❌ ecosystem.config.js não encontrado'
          exit 1
        fi
        
        echo '✅ Aplicação configurada no servidor'
        "

    - name: 🚀 Iniciar Aplicação
      run: |
        echo "🚀 Iniciando aplicação..."
        echo "========================="
        
        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
        cd ${{ env.APP_DIR }}
        
        # Parar processos existentes com verificação detalhada
        echo '🛑 Parando processos existentes...'
        pm2 stop ultrazend 2>/dev/null || echo 'Nenhum processo PM2 para parar'
        pm2 delete ultrazend 2>/dev/null || echo 'Nenhum processo PM2 para deletar'
        
        # Verificar estado inicial
        echo '📋 Estado inicial dos serviços:'
        echo 'PM2 Status:'
        pm2 jlist || echo 'PM2 sem processos'
        echo 'Nginx Status:'
        systemctl is-active nginx || echo 'Nginx inativo'
        
        # Iniciar Nginx com verificações robustas
        echo '🌐 Iniciando Nginx...'
        systemctl stop nginx 2>/dev/null || true
        sleep 2
        
        if systemctl start nginx; then
          echo '✅ Nginx iniciado com sucesso'
          systemctl enable nginx
          
          # Verificar se está escutando na porta 80
          if netstat -tlnp | grep ':80 '; then
            echo '✅ Nginx escutando na porta 80'
          else
            echo '⚠️  Nginx não está escutando na porta 80'
          fi
        else
          echo '❌ Falha ao iniciar Nginx'
          echo 'Logs do Nginx:'
          systemctl status nginx || true
          tail -20 /var/log/nginx/error.log 2>/dev/null || echo 'Sem logs de erro do Nginx'
          exit 1
        fi
        
        # Verificar arquivos essenciais antes do PM2
        echo '🔍 Verificando arquivos essenciais...'
        if [ -f 'ecosystem.config.js' ]; then
          echo '✅ ecosystem.config.js presente'
          echo 'Conteúdo do ecosystem.config.js (primeiras 15 linhas):'
          head -15 ecosystem.config.js
        else
          echo '❌ ecosystem.config.js não encontrado'
          exit 1
        fi
        
        if [ -f 'backend/dist/index.js' ]; then
          echo '✅ backend/dist/index.js presente'
          echo 'Tamanho: $(du -sh backend/dist/index.js)'
        else
          echo '❌ backend/dist/index.js não encontrado'
          echo 'Conteúdo do diretório backend/dist:'
          ls -la backend/dist/ || echo 'Diretório dist não existe'
          exit 1
        fi
        
        if [ -f 'backend/.env' ]; then
          echo '✅ backend/.env presente'
        else
          echo '❌ backend/.env não encontrado'
          exit 1
        fi
        
        # Iniciar aplicação com PM2 com verificações detalhadas
        echo '🚀 Iniciando aplicação com PM2...'
        
        # Primeiro, tentar iniciar em modo verboso
        if pm2 start ecosystem.config.js --env production --name ultrazend; then
          echo '✅ Comando PM2 executado'
          
          # Aguardar alguns segundos para estabilizar
          echo 'Aguardando estabilização (10s)...'
          sleep 10
          
          # Verificar se realmente iniciou
          if pm2 jlist | jq -r '.[] | select(.name==\"ultrazend\") | .pm2_env.status' | grep -q 'online'; then
            echo '✅ Aplicação confirmada como online'
          else
            echo '❌ Aplicação não está online'
            echo 'Status detalhado do PM2:'
            pm2 status
            echo 'Logs da aplicação:'
            pm2 logs ultrazend --lines 20 --nostream || echo 'Sem logs disponíveis'
            exit 1
          fi
        else
          echo '❌ Falha ao executar comando PM2 start'
          echo 'Tentando diagnóstico...'
          echo 'Diretório atual:'
          pwd
          echo 'Arquivos no diretório:'
          ls -la
          echo 'PM2 status atual:'
          pm2 status
          echo 'Tentando executar aplicação diretamente:'
          cd backend && timeout 5s node dist/index.js || echo 'Falha ao executar diretamente'
          exit 1
        fi
        
        # Salvar configuração PM2 e configurar startup
        echo '💾 Salvando configuração PM2...'
        pm2 save
        
        echo '⚡ Configurando inicialização automática...'
        pm2 startup systemd -u root --hp /root | grep '^sudo' | bash || echo 'PM2 startup pode já estar configurado'
        
        # Status final detalhado
        echo '📊 STATUS FINAL DOS SERVIÇOS:'
        echo '==============================='
        echo 'PM2 Status:'
        pm2 status
        echo ''
        echo 'PM2 Detailed:'
        pm2 jlist | jq -r '.[] | select(.name==\"ultrazend\") | \"Name: \" + .name + \" | Status: \" + .pm2_env.status + \" | PID: \" + (.pid|tostring) + \" | Uptime: \" + .pm2_env.pm_uptime' || echo 'Erro ao obter detalhes PM2'
        echo ''
        echo 'Nginx Status:'
        systemctl is-active nginx && echo 'Nginx: ATIVO' || echo 'Nginx: INATIVO'
        echo ''
        echo 'Portas em uso:'
        netstat -tlnp | grep -E ':(80|3001|443) ' || echo 'Nenhuma porta relevante encontrada'
        echo ''
        echo '✅ Inicialização concluída'
        "

    - name: 🏥 Health Checks Inteligentes
      run: |
        echo "🏥 Executando health checks inteligentes..."
        echo "=========================================="
        
        # Função para health check com retry
        health_check() {
          local url=$1
          local name=$2
          local max_attempts=20
          local delay=15
          
          echo "🔍 Verificando $name..."
          
          for attempt in $(seq 1 $max_attempts); do
            local total_wait=$((attempt * delay))
            echo "⏳ Tentativa $attempt/$max_attempts (${total_wait}s total) - $name"
            
            local response=$(curl -s -o /dev/null -w "%{http_code}|%{time_total}" "$url" 2>/dev/null || echo "000|0")
            local http_code=$(echo $response | cut -d'|' -f1)
            local time_total=$(echo $response | cut -d'|' -f2)
            
            case $http_code in
              200)
                echo "✅ $name: Respondendo corretamente (${time_total}s)"
                return 0
                ;;
              000)
                echo "⏳ $name: Serviço ainda não responde..."
                ;;
              *)
                echo "⚠️  $name: HTTP $http_code (aguardando...)"
                ;;
            esac
            
            if [ $attempt -lt $max_attempts ]; then
              sleep $delay
            fi
          done
          
          echo "❌ $name: Falhou após ${max_attempts} tentativas (${total_wait}s total)"
          return 1
        }
        
        echo ""
        echo "🏥 Aguardando inicialização completa (60s)..."
        sleep 60
        
        # Health check do backend local
        if health_check "http://${{ env.VPS_HOST }}:${{ env.APP_PORT }}/health" "Backend Local"; then
          echo "✅ Backend local está funcionando!"
        else
          echo "❌ Backend local não está respondendo"
          BACKEND_FAILED=1
        fi
        
        echo ""
        
        # Health check do frontend via HTTPS
        if health_check "https://${{ env.DOMAIN }}/health" "Frontend HTTPS"; then
          echo "✅ Frontend HTTPS está funcionando!"
        else
          echo "⚠️ Frontend HTTPS não responde - testando HTTP..."
          if health_check "http://${{ env.DOMAIN }}" "Frontend HTTP"; then
            echo "✅ Frontend HTTP está funcionando!"
          else
            echo "❌ Frontend não está respondendo"
            FRONTEND_FAILED=1
          fi
        fi
        
        # Verificar logs se houver falha
        if [ "${BACKEND_FAILED}" = "1" ] || [ "${FRONTEND_FAILED}" = "1" ]; then
          echo ""
          echo "🔍 Coletando logs para diagnóstico..."
          echo "===================================="
          
          sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          cd ${{ env.APP_DIR }}
          echo '📋 Status PM2:'
          pm2 status
          echo ''
          echo '📝 Logs recentes (últimas 50 linhas):'
          pm2 logs ultrazend --lines 50 --nostream
          echo ''
          echo '📋 Status Nginx:'
          systemctl status nginx
          "
          
          exit 1
        fi

    - name: ✅ Verificação Final e Resumo
      if: success()
      run: |
        DEPLOY_END_TIME=$(date +%s)
        DEPLOY_DURATION=$((DEPLOY_END_TIME - DEPLOY_START_TIME))
        DURATION_FORMATTED=$(printf '%02d:%02d:%02d' $((DEPLOY_DURATION/3600)) $((DEPLOY_DURATION%3600/60)) $((DEPLOY_DURATION%60)))
        
        echo "🎉 DEPLOY CONCLUÍDO COM SUCESSO!"
        echo "================================"
        echo "⏱️  Tempo total: $DURATION_FORMATTED"
        echo "🌐 Website: https://${{ env.DOMAIN }}"
        echo "🏥 Health Check: https://${{ env.DOMAIN }}/health"
        echo "🔌 API: https://${{ env.DOMAIN }}/api"
        echo "📊 Status: ONLINE ✅"
        echo ""
        
        # Verificação final dos serviços
        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
        cd ${{ env.APP_DIR }}
        echo '📊 Status final PM2:'
        pm2 jlist | jq -r '.[] | select(.name==\"ultrazend\") | \"Status: \" + .pm2_env.status + \" | PID: \" + (.pid|tostring) + \" | Uptime: \" + .pm2_env.pm_uptime'
        echo ''
        echo '🌐 Status Nginx:'
        systemctl is-active nginx >/dev/null && echo '✅ Nginx: Active' || echo '❌ Nginx: Inactive'
        echo ''
        echo '💾 Uso de recursos:'
        free -h | head -2
        df -h ${{ env.APP_DIR }} | tail -1
        "
        
        echo ""
        echo "🎊🎊🎊 ULTRAZEND DEPLOY FINALIZADO COM SUCESSO! 🎊🎊🎊"

    - name: ❌ Deploy Failed - Diagnóstico
      if: failure()
      run: |
        DEPLOY_END_TIME=$(date +%s)
        DEPLOY_DURATION=$((DEPLOY_END_TIME - DEPLOY_START_TIME))
        DURATION_FORMATTED=$(printf '%02d:%02d:%02d' $((DEPLOY_DURATION/3600)) $((DEPLOY_DURATION%3600/60)) $((DEPLOY_DURATION%60)))
        
        echo "❌ ULTRAZEND DEPLOY FALHOU!"
        echo "==========================="
        echo "⏱️  Tempo até falha: $DURATION_FORMATTED"
        echo "📊 Status: FAILED ❌"
        echo ""
        echo "🔍 Coletando informações de diagnóstico..."
        
        # Coletar logs detalhados
        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
        echo '📋 Status PM2:'
        pm2 status 2>/dev/null || echo 'PM2 não disponível'
        echo ''
        echo '📝 Logs da aplicação:'
        pm2 logs ultrazend --lines 50 --nostream 2>/dev/null || echo 'Logs PM2 não disponíveis'
        echo ''
        echo '🌐 Status Nginx:'
        systemctl status nginx 2>/dev/null || echo 'Nginx não disponível'
        echo ''
        echo '💾 Uso de disco:'
        df -h
        echo ''
        echo '🧠 Uso de memória:'
        free -h
        " 2>/dev/null || echo "Não foi possível conectar à VPS para diagnóstico"
        
        echo ""
        echo "💥💥💥 ULTRAZEND DEPLOY FALHOU - VERIFIQUE OS LOGS ACIMA 💥💥💥"
        
        exit 1