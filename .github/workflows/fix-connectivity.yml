name: 🔧 Fix VPS Connectivity Issues

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'diagnose'
        type: choice
        options:
        - diagnose
        - fix-firewall
        - restart-services
        - full-reset

env:
  VPS_HOST: '72.60.10.112'
  VPS_USER: 'root'
  APP_DIR: '/var/www/urbansend'

jobs:
  fix-connectivity:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🔧 Setup SSH
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y sshpass
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        ssh-keyscan -H ${{ env.VPS_HOST }} >> ~/.ssh/known_hosts 2>/dev/null

    - name: 🔍 Diagnose Connectivity Issues
      if: ${{ github.event.inputs.action == 'diagnose' }}
      run: |
        echo "🔍 Diagnosticando problemas de conectividade..."
        
        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
        echo '📋 Informações do Sistema:'
        uname -a
        echo ''
        
        echo '🔥 Status do Firewall:'
        if command -v ufw &> /dev/null; then
            ufw status verbose
        else
            echo 'UFW não está instalado'
        fi
        echo ''
        
        echo '🌐 Interfaces de Rede:'
        ip addr show | grep -A5 'inet '
        echo ''
        
        echo '🔧 Portas em Uso:'
        netstat -tlnp | grep -E ':(3010|25|6379|80|443)'
        echo ''
        
        echo '🐳 Status do Docker:'
        docker --version || echo 'Docker não instalado'
        docker ps --filter 'name=urbansend' || echo 'Nenhum container UrbanSend'
        echo ''
        
        echo '📡 Regras iptables (primeiras 20):'
        iptables -L -n | head -20
        echo ''
        
        echo '🏃 Processos Importantes:'
        ps aux | grep -E '(docker|nginx|node)' | grep -v grep || echo 'Nenhum processo encontrado'
        echo ''
        
        echo '💾 Uso do Sistema:'
        echo 'Disk:'
        df -h | head -5
        echo 'Memory:'
        free -h
        echo ''
        
        if [ -d '${{ env.APP_DIR }}' ]; then
          echo '📁 Conteúdo do diretório da aplicação:'
          ls -la ${{ env.APP_DIR }}
        else
          echo '📁 Diretório da aplicação não existe: ${{ env.APP_DIR }}'
        fi
        "

    - name: 🔥 Fix Firewall Rules
      if: ${{ github.event.inputs.action == 'fix-firewall' }}
      run: |
        echo "🔥 Corrigindo regras de firewall..."
        
        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
        echo '🔧 Configurando UFW...'
        
        # Reset UFW
        ufw --force reset
        
        # Allow essential services
        ufw allow 22/tcp comment 'SSH'
        ufw allow 80/tcp comment 'HTTP'
        ufw allow 443/tcp comment 'HTTPS'
        ufw allow 3010/tcp comment 'UrbanSend App'
        ufw allow 25/tcp comment 'SMTP'
        
        # Enable UFW
        echo 'y' | ufw enable
        
        echo '✅ UFW Status:'
        ufw status verbose
        echo ''
        
        echo '🔧 Configurando iptables direto...'
        # Direct iptables rules as backup
        iptables -I INPUT -p tcp --dport 22 -j ACCEPT
        iptables -I INPUT -p tcp --dport 80 -j ACCEPT
        iptables -I INPUT -p tcp --dport 443 -j ACCEPT
        iptables -I INPUT -p tcp --dport 3010 -j ACCEPT
        iptables -I INPUT -p tcp --dport 25 -j ACCEPT
        
        # Save iptables rules
        iptables-save > /etc/iptables/rules.v4 2>/dev/null || echo 'Could not save iptables rules'
        
        echo '✅ Firewall configurado'
        "

    - name: 🔄 Restart Services
      if: ${{ github.event.inputs.action == 'restart-services' }}
      run: |
        echo "🔄 Reiniciando serviços UrbanSend..."
        
        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
        cd ${{ env.APP_DIR }} || {
          echo '❌ Diretório da aplicação não encontrado: ${{ env.APP_DIR }}'
          exit 1
        }
        
        echo '🛑 Parando serviços...'
        docker compose -f docker-compose.production.yml down --remove-orphans 2>/dev/null || echo 'Nenhum container para parar'
        
        echo '🧹 Limpando recursos...'
        docker container prune -f
        docker image prune -f
        docker network prune -f
        
        echo '🚀 Iniciando serviços...'
        if [ -f 'docker-compose.production.yml' ]; then
          docker compose -f docker-compose.production.yml up -d --build
        else
          echo '❌ docker-compose.production.yml não encontrado'
          exit 1
        fi
        
        echo '⏳ Aguardando inicialização (60s)...'
        sleep 60
        
        echo '📊 Status dos serviços:'
        docker compose -f docker-compose.production.yml ps
        
        echo '🔍 Verificação de portas:'
        netstat -tlnp | grep -E ':(3010|25|6379)'
        
        echo '🏥 Health check:'
        curl -f http://localhost:3010/health || echo 'Health check falhou - aguarde mais alguns minutos'
        "

    - name: 🔄 Full Reset
      if: ${{ github.event.inputs.action == 'full-reset' }}
      run: |
        echo "🔄 Executando reset completo..."
        
        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
        echo '🛑 Parando todos os containers UrbanSend...'
        docker stop \$(docker ps -q --filter 'name=urbansend') 2>/dev/null || true
        docker rm \$(docker ps -aq --filter 'name=urbansend') 2>/dev/null || true
        
        echo '🧹 Removendo recursos UrbanSend...'
        docker network rm \$(docker network ls -q --filter 'name=urbansend') 2>/dev/null || true
        docker volume rm \$(docker volume ls -q --filter 'name=urbansend') 2>/dev/null || true
        docker image prune -f
        
        echo '🔥 Reconfigurando firewall...'
        ufw --force reset
        ufw allow 22/tcp comment 'SSH'
        ufw allow 80/tcp comment 'HTTP'  
        ufw allow 443/tcp comment 'HTTPS'
        ufw allow 3010/tcp comment 'UrbanSend'
        ufw allow 25/tcp comment 'SMTP'
        echo 'y' | ufw enable
        
        echo '🐳 Verificando Docker...'
        if ! command -v docker >/dev/null; then
          echo 'Instalando Docker...'
          curl -fsSL https://get.docker.com -o get-docker.sh
          sh get-docker.sh
          rm get-docker.sh
        fi
        systemctl start docker
        systemctl enable docker
        
        echo '📁 Recriando diretório da aplicação...'
        rm -rf ${{ env.APP_DIR }}
        mkdir -p ${{ env.APP_DIR }}
        
        echo '✅ Reset completo finalizado'
        echo 'Status do sistema:'
        docker --version
        ufw status
        ls -la ${{ env.APP_DIR }}
        "

    - name: 📊 Show Results
      run: |
        echo "✅ Ação completada: ${{ github.event.inputs.action }}"
        echo ""
        echo "🌐 URLs para teste:"
        echo "Aplicação:    http://${{ env.VPS_HOST }}:3010"
        echo "Health Check: http://${{ env.VPS_HOST }}:3010/health"
        echo "HTTPS:        https://${{ env.DOMAIN }}"
        echo ""
        echo "🔧 Se ainda não estiver acessível:"
        echo "1. Verifique as configurações de firewall do provedor VPS"
        echo "2. Confirme que a VPS não está atrás de NAT"
        echo "3. Verifique grupos de segurança (se aplicável)"
        echo "4. Entre em contato com o suporte do provedor VPS"
        echo ""
        echo "📋 Para executar diagnóstico novamente:"
        echo "1. Vá para Actions > Fix VPS Connectivity Issues"
        echo "2. Selecione 'diagnose' e execute"